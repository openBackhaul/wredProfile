{
	"info": {
		"_postman_id": "fcb613d6-845b-4e34-bb49-f166e8311446",
		"name": "WredProfile_1.0.0-tsi.240104.1945+validator",
		"schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json",
		"_exporter_id": "9715086"
	},
	"item": [
		{
			"name": "UserInput",
			"item": [
				{
					"name": "for loading user input",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"console.clear();\r",
									"logger.struc(\"==========================================================================================\");\r",
									"logger.struc(\"===== WredProfile_1.0.0-tsi.240104.1945+validator ========================================\");\r",
									"logger.struc(\"==========================================================================================\");\r",
									"\r",
									"\r",
									"/****************************************************************************************\r",
									"* Loading Input Data from File\r",
									"****************************************************************************************/\r",
									"var inputFromFile;\r",
									"try {\r",
									"    inputFromFile = data\r",
									"\r",
									"} catch (error) {\r",
									"    console.error(\"! Input data could not be loaded.\")\r",
									"}\r",
									"\r",
									"\r",
									"/****************************************************************************************\r",
									"* Setting Environmental Variables \r",
									"****************************************************************************************/\r",
									"try {\r",
									"    pm.environment.clear();\r",
									"\r",
									"    let mode;\r",
									"    mode = inputFromFile.mode;\r",
									"    // Mode to be applied while running this testcase collection \r",
									"    //   \"analysis\" -> human does detailed analysis of response bodies etc.\r",
									"    //   \"testing\" -> automated approval based on binary result\r",
									"    //   \"debugging\" -> support for programming the testcase collection\r",
									"\r",
									"    let logLevel;\r",
									"    switch(mode) {\r",
									"        case \"debugging\":\r",
									"            logLevel = \"debug\";\r",
									"            break;\r",
									"        case \"analysis\":\r",
									"            logLevel = \"log\";\r",
									"            break;\r",
									"        case \"testing\":\r",
									"            logLevel = \"error\";\r",
									"            break;\r",
									"        default:\r",
									"            logLevel = \"debug\";\r",
									"    };\r",
									"    // Level of detail of the logging; find more info in pre-request script on the collection's level\r",
									"\r",
									"    let serverList = [];\r",
									"    serverList = inputFromFile.serverList;\r",
									"    // list of addresses of applications, controllers etc.\r",
									"    // serverName : key attribute for identifying the servers\r",
									"    // dummyUri : http address that shall be addressed by bare processing Requests\r",
									"    // server : part of the URI that is comprised from protocol, IP address and TCP port\r",
									"    // pathToControlConstruct : part of the URI that is identical for all Requests that are addressing into the device's data tree\r",
									"    // authorizationCode : authentication that has to be sent in case of BasicAuth protection (e.g. OpenDaylight NBI)\r",
									"    // operationKey : ApiKey that has to be sent in case of addressing a MW SDN application (e.g. MicroWaveDeviceInventory)\r",
									"    // userName : user header to be sent in case of addressing a MW SDN application\r",
									"    // originator : originator header to be sent in case of addressing a MW SDN application\r",
									"    // xCorrelator : x-correlator header to be sent in case of addressing a MW SDN application\r",
									"    // traceIndicator : trace-indicator header to be sent in case of addressing a MW SDN application\r",
									"    // customerJourney : customer-journey header to be sent in case of addressing a MW SDN application\r",
									"\r",
									"    let collectionInputList = [];\r",
									"    collectionInputList = inputFromFile.collectionInputList;\r",
									"    // list of inputs to individual test case collections\r",
									"    // serverToBeApplied : server that shall be addressed in the respective request/test case\r",
									"    // mountName : mountName of the device that is to be validated\r",
									"    // uuid of the object that is to be validated\r",
									"    // localId of the object that is to be validated\r",
									"    // kindOfReference : 'dynamic' for testing against implementations, 'static' for testing against simulators\r",
									"    // suffixUrlEncodingIsRequired : e.g. Mockoon requires the suffix being url encoded, but applications vice versa\r",
									"\r",
									"    pm.environment.set(\"mode\", mode);\r",
									"    pm.environment.set(\"logLevel\", logLevel);\r",
									"    pm.environment.set(\"serverList\", serverList);\r",
									"    pm.environment.set(\"collectionInputList\", collectionInputList);\r",
									"\r",
									"} catch (error) {\r",
									"    console.error(\"! Environment variables could not be set.\")\r",
									"}\r",
									"\r",
									"\r",
									"/****************************************************************************************\r",
									"* Setting Collection Variables \r",
									"****************************************************************************************/\r",
									"try {\r",
									"    pm.collectionVariables.clear()\r",
									"\r",
									"} catch (error) {\r",
									"    console.error(\"! Collection variables could not be set.\")\r",
									"}\r",
									"\r",
									"\r",
									"/****************************************************************************************\r",
									"* Setting Local Variables and Preparing the Request\r",
									"****************************************************************************************/\r",
									"try {\r",
									"    let uri;\r",
									"    let dummyServerInfo;\r",
									"    dummyServerInfo = ExtractServerInformation(inputFromFile.serverList, \"dummy\");\r",
									"    uri = dummyServerInfo.dummyUri;\r",
									"\r",
									"    pm.variables.clear();\r",
									"\r",
									"    pm.variables.set(\"uri\", uri);\r",
									"\r",
									"    pm.request.headers.upsert({ key: \"Accept\", value: \"application/json\" });\r",
									"    pm.request.headers.upsert({ key: \"Content-Type\", value: \"application/json\" })\r",
									"\r",
									"} catch (error) {\r",
									"    console.error(\"! Local variables could not be set.\")\r",
									"}\r",
									"\r",
									"\r",
									"/****************************************************************************************\r",
									"* Functions\r",
									"****************************************************************************************/\r",
									"function ExtractServerInformation(serverList, searchedServerName) {\r",
									"    try {\r",
									"        for(let i=0; i<serverList.length; i++) {\r",
									"            if(serverList[i].serverName==searchedServerName) {\r",
									"                return serverList[i]\r",
									"            }\r",
									"        }\r",
									"    } catch (error) {\r",
									"        console.error(\"! serverList not found or faulty\");\r",
									"        return {}\r",
									"    }\r",
									"    logger.warn(\"Server could not be found in serverList.\");\r",
									"    return {}\r",
									"}\r",
									"\r",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"auth": {
							"type": "noauth"
						},
						"method": "GET",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{{requestBody}}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{uri}}",
							"host": [
								"{{uri}}"
							]
						}
					},
					"response": []
				}
			]
		},
		{
			"name": "functions()",
			"item": []
		},
		{
			"name": "Validation",
			"item": [
				{
					"name": "WredProfile",
					"item": [
						{
							"name": "ListOfLTPUuidAndLidPairsAndNames",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"logger.struc(\"\\n===== ListOfLTPUuidAndLidPairsAndNames ====================================================\");\r",
											"\r",
											"\r",
											"/****************************************************************************************\r",
											"* Loading Input Data\r",
											"****************************************************************************************/\r",
											"var collectionInfo = {};\r",
											"var serverInfo = {};\r",
											"var dummyServerInfo = {};\r",
											"try {\r",
											"    let collectionInputList;\r",
											"    collectionInputList = pm.environment.get(\"collectionInputList\");\r",
											"    collectionInfo = ExtractCollectionInput(collectionInputList, \"WredProfile\");\r",
											"\r",
											"    let serverToBeApplied;\r",
											"    serverToBeApplied = collectionInfo.serverToBeApplied;\r",
											"    let serverList;\r",
											"    serverList = pm.environment.get(\"serverList\");\r",
											"    serverInfo = ExtractServerInformation(serverList, serverToBeApplied);\r",
											"    dummyServerInfo = ExtractServerInformation(serverList, \"dummy\");\r",
											"\r",
											"} catch (error) {\r",
											"    logger.error(\"! Input data could not be loaded.\")\r",
											"}\r",
											"\r",
											"\r",
											"/****************************************************************************************\r",
											"* Processing\r",
											"****************************************************************************************/\r",
											"\r",
											"\r",
											"/****************************************************************************************\r",
											"* Setting Local Variables and Preparing the Request\r",
											"****************************************************************************************/\r",
											"try {\r",
											"    let filters;\r",
											"    filters = \"?fields=logical-termination-point(uuid;layer-protocol(local-id;layer-protocol-name))\";\r",
											"    filters = UrlEncodeFieldsFilterString(filters);\r",
											"\r",
											"    let resourcePath;\r",
											"    resourcePath = \"\";\r",
											"\r",
											"    let pathToControlConstruct;\r",
											"    pathToControlConstruct = serverInfo.pathToControlConstruct;\r",
											"    let mountName;\r",
											"    mountName = collectionInfo.mountName;\r",
											"    pathToControlConstruct = FillMountNameIntoPath(pathToControlConstruct, mountName);\r",
											"\r",
											"    let server;\r",
											"    server = serverInfo.server;\r",
											"\r",
											"    let uri;\r",
											"    if (mountName!=\"\") {\r",
											"        uri = server + pathToControlConstruct + resourcePath + filters\r",
											"    } else {\r",
											"        logger.warn(\"Input data incomplete.\");\r",
											"        uri = dummyServerInfo.dummyUri\r",
											"    }\r",
											"\r",
											"    let requestBody;\r",
											"    requestBody = '{}';\r",
											"\r",
											"\r",
											"    pm.variables.clear();\r",
											"\r",
											"    pm.variables.set(\"uri\", uri);\r",
											"    pm.variables.set(\"requestBody\", requestBody);\r",
											"    \r",
											"    pm.request.headers.upsert({ key: \"Authorization\", value: serverInfo.authorizationCode });\r",
											"    pm.request.headers.upsert({ key: \"operation-key\", value: serverInfo.operationKey });\r",
											"    pm.request.headers.upsert({ key: \"user\", value: serverInfo.userName });\r",
											"    pm.request.headers.upsert({ key: \"originator\", value: serverInfo.originator });\r",
											"    pm.request.headers.upsert({ key: \"x-correlator\", value: serverInfo.xCorrelator });\r",
											"    pm.request.headers.upsert({ key: \"trace-indicator\", value: serverInfo.traceIndicator });\r",
											"    pm.request.headers.upsert({ key: \"customer-journey\", value: serverInfo.customerJourney });\r",
											"\r",
											"    pm.request.headers.upsert({ key: \"Accept\", value: \"application/json\" });\r",
											"    pm.request.headers.upsert({ key: \"Content-Type\", value: \"application/json\" })\r",
											"\r",
											"} catch (error) {\r",
											"    logger.error(\"! Local variables could not be set.\")\r",
											"}\r",
											"\r",
											"\r",
											"/****************************************************************************************\r",
											"* Functions\r",
											"****************************************************************************************/\r",
											"function ReplaceSubstringByNewstringInInputstring(inputstring, substring, newstring) {\r",
											"    try {\r",
											"        let indexOfStartOfSubstring = inputstring.lastIndexOf(substring);\r",
											"        while ( indexOfStartOfSubstring != -1 ) {\r",
											"            let precedingSubString = inputstring.slice(0, indexOfStartOfSubstring);\r",
											"            let indexOfEndOfSubstring = indexOfStartOfSubstring + substring.length;\r",
											"            let subsequentSubString = inputstring.slice(indexOfEndOfSubstring);\r",
											"            inputstring = precedingSubString + newstring + subsequentSubString;\r",
											"\r",
											"            indexOfStartOfSubstring = inputstring.lastIndexOf(substring)\r",
											"        }\r",
											"\r",
											"    } catch (error) {\r",
											"        inputstring = \"-1\";\r",
											"        logger.error(\"! Substring could not be replaced by Newstring\")\r",
											"    }\r",
											"\r",
											"    return inputstring\r",
											"}\r",
											"\r",
											"function UrlEncodeFieldsFilterString(filters) {\r",
											"    filters = ReplaceSubstringByNewstringInInputstring(filters, \"(\", \"%28\");\r",
											"    filters = ReplaceSubstringByNewstringInInputstring(filters, \")\", \"%29\");\r",
											"    filters = ReplaceSubstringByNewstringInInputstring(filters, \":\", \"%3A\");\r",
											"    filters = ReplaceSubstringByNewstringInInputstring(filters, \";\", \"%3B\");\r",
											"    return filters\r",
											"}\r",
											"\r",
											"function FillUuidIntoPath(path, uuid) {\r",
											"    if ( (uuid!=undefined) && (uuid!=null) && (uuid!=\"\") ) {\r",
											"      let subStringToBeReplaced = \"{uuid}\";\r",
											"      let indexOfStartOfSubStringToBeReplaced = path.lastIndexOf(subStringToBeReplaced);\r",
											"      let precedingSubString = path.slice(0, indexOfStartOfSubStringToBeReplaced);\r",
											"      let indexOfEndOfSubStringToBeReplaced = indexOfStartOfSubStringToBeReplaced + subStringToBeReplaced.length;\r",
											"      let subsequentSubString = path.slice(indexOfEndOfSubStringToBeReplaced);\r",
											"      path = precedingSubString + uuid + subsequentSubString;\r",
											"      return path\r",
											"    } else {\r",
											"      return path\r",
											"    }\r",
											"}\r",
											"\r",
											"function FillLocalIdIntoPath(path, localId) {\r",
											"    if ( (localId!=undefined) && (localId!=null) && (localId!=\"\") ) {\r",
											"      let subStringToBeReplaced = \"{localId}\";\r",
											"      let indexOfStartOfSubStringToBeReplaced = path.lastIndexOf(subStringToBeReplaced);\r",
											"      let precedingSubString = path.slice(0, indexOfStartOfSubStringToBeReplaced);\r",
											"      let indexOfEndOfSubStringToBeReplaced = indexOfStartOfSubStringToBeReplaced + subStringToBeReplaced.length;\r",
											"      let subsequentSubString = path.slice(indexOfEndOfSubStringToBeReplaced);\r",
											"      path = precedingSubString + localId + subsequentSubString;\r",
											"      return path\r",
											"    } else {\r",
											"      return path\r",
											"    }\r",
											"}\r",
											"\r",
											"function FillMountNameIntoPath(path, mountName) {\r",
											"  let subStringToBeReplaced = \"{mountName}\";\r",
											"  let indexOfStartOfSubStringToBeReplaced = path.lastIndexOf(subStringToBeReplaced);\r",
											"  let precedingSubString = path.slice(0, indexOfStartOfSubStringToBeReplaced);\r",
											"  let indexOfEndOfSubStringToBeReplaced = indexOfStartOfSubStringToBeReplaced + subStringToBeReplaced.length;\r",
											"  let subsequentSubString = path.slice(indexOfEndOfSubStringToBeReplaced);\r",
											"  path = precedingSubString + mountName + subsequentSubString;\r",
											"  return path\r",
											"}\r",
											"\r",
											"function ExtractServerInformation(serverList, searchedServerName) {\r",
											"    try {\r",
											"        for(let i=0; i<serverList.length; i++) {\r",
											"            if(serverList[i].serverName==searchedServerName) {\r",
											"                return serverList[i]\r",
											"            }\r",
											"        }\r",
											"    } catch (error) {\r",
											"        logger.error(\"! serverList not found or faulty\");\r",
											"        return {}\r",
											"    }\r",
											"    logger.warn(\"Server could not be found in serverList.\");\r",
											"    return {}\r",
											"}\r",
											"\r",
											"function ExtractCollectionInput(collectionInputList, searchedCollection) {\r",
											"    try {\r",
											"        for(let i=0; i<collectionInputList.length; i++) {\r",
											"            if(collectionInputList[i].collectionName==searchedCollection) {\r",
											"                return collectionInputList[i]\r",
											"            }\r",
											"        }\r",
											"    } catch (error) {\r",
											"        logger.error(\"! collectionInputList not found or faulty\");\r",
											"        return {}\r",
											"    }\r",
											"    logger.warn(\"Collection could not be found in collectionInputList.\");\r",
											"    return {}\r",
											"}\r",
											"\r",
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								},
								{
									"listen": "test",
									"script": {
										"exec": [
											"/****************************************************************************************\r",
											"* Loading Input Data\r",
											"****************************************************************************************/\r",
											"var uri;\r",
											"var dummyUri;\r",
											"var serverToBeApplied;\r",
											"try {\r",
											"    uri = pm.variables.get(\"uri\");\r",
											"\r",
											"    let serverList;\r",
											"    serverList = pm.environment.get(\"serverList\");\r",
											"    let dummyServerInfo;\r",
											"    dummyServerInfo = ExtractServerInformation(serverList, \"dummy\");\r",
											"    dummyUri = dummyServerInfo.dummyUri;\r",
											"\r",
											"    let collectionInputList;\r",
											"    collectionInputList = pm.environment.get(\"collectionInputList\");\r",
											"    let collectionInfo;\r",
											"    collectionInfo = ExtractCollectionInput(collectionInputList, \"WredProfile\");\r",
											"    serverToBeApplied = collectionInfo.serverToBeApplied\r",
											"\r",
											"} catch (error) {\r",
											"    logger.error(\"! Input data could not be loaded.\")\r",
											"}\r",
											"\r",
											"\r",
											"/****************************************************************************************\r",
											"* Extracting Result\r",
											"****************************************************************************************/\r",
											"var responseCode;\r",
											"var responseObject = {};\r",
											"var ethernetContainerUuidAndLocalId = {};\r",
											"try {\r",
											"    if ( uri != dummyUri ) {\r",
											"        let response;\r",
											"        response = pm.response;\r",
											"\r",
											"        responseCode = parseInt(response.code);\r",
											"\r",
											"        if ( Math.floor(responseCode/100) === 2 ) {\r",
											"            responseObject = JSON.parse(response.stream);\r",
											"\r",
											"            let layerProtocolName;\r",
											"            layerProtocolName = \"ethernet-container-2-0:LAYER_PROTOCOL_NAME_TYPE_ETHERNET_CONTAINER_LAYER\";\r",
											"            ethernetContainerUuidAndLocalId = FindUuidAndLocalIdForLtpType(responseObject, layerProtocolName, serverToBeApplied)\r",
											"\r",
											"        } else {\r",
											"            pm.test(\"List of LTPs could be loaded\", function () {\r",
											"                pm.expect(false).to.be.true\r",
											"            });\r",
											"            logger.log(\"FAIL: List of LTPs could not be loaded\")\r",
											"        }\r",
											"\r",
											"    }\r",
											"\r",
											"} catch (error) {\r",
											"    logger.error(\"! result could not be extracted.\")\r",
											"}\r",
											"\r",
											"\r",
											"/****************************************************************************************\r",
											"* Processing\r",
											"****************************************************************************************/\r",
											"try {\r",
											"    logger.log(\"Analysis:\");\r",
											"    if ( (uri!=dummyUri) && (Object.keys(ethernetContainerUuidAndLocalId).length==2) ) {\r",
											"        logger.log(\"  - ethernetContainerUuid: \" + ethernetContainerUuidAndLocalId.uuid);\r",
											"        logger.log(\"  - ethernetContainerLocalId: \" + ethernetContainerUuidAndLocalId.localId)\r",
											"    } else {\r",
											"        logger.log(\"  - No EthernetContainer found.\")\r",
											"    }\r",
											"\r",
											"} catch (error) {\r",
											"    logger.error(\"! validation could not be completely executed.\")\r",
											"}\r",
											"\r",
											"\r",
											"/****************************************************************************************\r",
											"* Setting Collection Variables\r",
											"****************************************************************************************/\r",
											"try {\r",
											"    pm.collectionVariables.set(\"ethernetContainerUuidAndLocalId\", ethernetContainerUuidAndLocalId);\r",
											"\r",
											"} catch (error) {\r",
											"    logger.error(\"! collection variables could not be set.\")\r",
											"}\r",
											"\r",
											"\r",
											"/****************************************************************************************\r",
											"* Functions\r",
											"****************************************************************************************/\r",
											"function ExtractServerInformation(serverList, searchedServerName) {\r",
											"    try {\r",
											"        for(let i=0; i<serverList.length; i++) {\r",
											"            if(serverList[i].serverName==searchedServerName) {\r",
											"                return serverList[i]\r",
											"            }\r",
											"        }\r",
											"    } catch (error) {\r",
											"        logger.error(\"! serverList not found or faulty\");\r",
											"        return {}\r",
											"    }\r",
											"    logger.warn(\"Server could not be found in serverList.\");\r",
											"    return {}\r",
											"}\r",
											"\r",
											"function ExtractCollectionInput(collectionInputList, searchedCollection) {\r",
											"    try {\r",
											"        for(let i=0; i<collectionInputList.length; i++) {\r",
											"            if(collectionInputList[i].collectionName==searchedCollection) {\r",
											"                return collectionInputList[i]\r",
											"            }\r",
											"        }\r",
											"    } catch (error) {\r",
											"        logger.error(\"! collectionInputList not found or faulty\");\r",
											"        return {}\r",
											"    }\r",
											"    logger.warn(\"Collection could not be found in collectionInputList.\");\r",
											"    return {}\r",
											"}\r",
											"\r",
											"function FindUuidAndLocalIdForLtpType(responseObject, searchedLayerProtocolName, serverToBeApplied) {\r",
											"    if ( serverToBeApplied == \"controller in WredProfile_1.0.0-tsi.240104.1945+simulator.completeness\" ) {\r",
											"        for(let i=0; i<responseObject[\"core-model-1-4:control-construct\"][\"logical-termination-point\"].length; i++) {\r",
											"            let layerProtocolName;\r",
											"            try {\r",
											"                layerProtocolName = responseObject[\"core-model-1-4:control-construct\"][\"logical-termination-point\"][i][\"layer-protocol\"][0][\"layer-protocol-name\"]\r",
											"            } catch (error) {\r",
											"                layerProtocolName = \"\"\r",
											"            }\r",
											"            if( layerProtocolName == searchedLayerProtocolName ) {\r",
											"                let ethernetContainerUuidAndLocalId = {};\r",
											"                ethernetContainerUuidAndLocalId.uuid = responseObject[\"core-model-1-4:control-construct\"][\"logical-termination-point\"][i][\"uuid\"];\r",
											"                ethernetContainerUuidAndLocalId.localId = responseObject[\"core-model-1-4:control-construct\"][\"logical-termination-point\"][i][\"layer-protocol\"][0][\"local-id\"];\r",
											"                return ethernetContainerUuidAndLocalId\r",
											"            }\r",
											"        }\r",
											"        return \"\"\r",
											"\r",
											"    } else {\r",
											"        for(let i=0; i<responseObject[\"core-model-1-4:control-construct\"][0][\"logical-termination-point\"].length; i++) {\r",
											"            let layerProtocolName;\r",
											"            try {\r",
											"                layerProtocolName = responseObject[\"core-model-1-4:control-construct\"][0][\"logical-termination-point\"][i][\"layer-protocol\"][0][\"layer-protocol-name\"]\r",
											"            } catch (error) {\r",
											"                layerProtocolName = \"\"\r",
											"            }\r",
											"            if( layerProtocolName == searchedLayerProtocolName ) {\r",
											"                let ethernetContainerUuidAndLocalId = {};\r",
											"                ethernetContainerUuidAndLocalId.uuid = responseObject[\"core-model-1-4:control-construct\"][0][\"logical-termination-point\"][i][\"uuid\"];\r",
											"                ethernetContainerUuidAndLocalId.localId = responseObject[\"core-model-1-4:control-construct\"][0][\"logical-termination-point\"][i][\"layer-protocol\"][0][\"local-id\"];\r",
											"                return ethernetContainerUuidAndLocalId\r",
											"            }\r",
											"        }\r",
											"        return \"\"\r",
											"    }\r",
											"\r",
											"}\r",
											"\r",
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"auth": {
									"type": "noauth"
								},
								"method": "GET",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{{requestBody}}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{uri}}",
									"host": [
										"{{uri}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "ethernet-container-capability",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"/****************************************************************************************\r",
											"* Loading Input Data\r",
											"****************************************************************************************/\r",
											"var uri;\r",
											"var dummyUri;\r",
											"try {\r",
											"    uri = pm.variables.get(\"uri\");\r",
											"\r",
											"    let serverList;\r",
											"    serverList = pm.environment.get(\"serverList\");\r",
											"    let dummyServerInfo;\r",
											"    dummyServerInfo = ExtractServerInformation(serverList, \"dummy\");\r",
											"    dummyUri = dummyServerInfo.dummyUri;\r",
											"\r",
											"} catch (error) {\r",
											"    logger.error(\"! Input data could not be loaded.\")\r",
											"}\r",
											"\r",
											"\r",
											"/****************************************************************************************\r",
											"* Extracting Result\r",
											"****************************************************************************************/\r",
											"var responseCode;\r",
											"var responseObject = {};\r",
											"var wredProfileIsAvail = false;\r",
											"var wredProfileConfigurationIsAvail = false;\r",
											"try {\r",
											"    if ( uri != dummyUri ) {\r",
											"        let response;\r",
											"        response = pm.response;\r",
											"\r",
											"        responseCode = parseInt(response.code);\r",
											"\r",
											"        if ( Math.floor(responseCode/100) === 2 ) {\r",
											"            responseObject = JSON.parse(response.stream);\r",
											"\r",
											"            wredProfileIsAvail = responseObject[\"ethernet-container-2-0:ethernet-container-capability\"][\"wred-profile-is-avail\"];\r",
											"            wredProfileConfigurationIsAvail = responseObject[\"ethernet-container-2-0:ethernet-container-capability\"][\"wred-profile-configuration-is-avail\"]\r",
											"\r",
											"        } else {\r",
											"            pm.test(\"EthernetContainer could be loaded\", function () {\r",
											"                pm.expect(false).to.be.true\r",
											"            });\r",
											"            logger.log(\"FAIL: EthernetContainer could not be loaded\")\r",
											"        }\r",
											"\r",
											"    }\r",
											"\r",
											"} catch (error) {\r",
											"    logger.error(\"! result could not be extracted.\")\r",
											"}\r",
											"\r",
											"\r",
											"/****************************************************************************************\r",
											"* Processing\r",
											"****************************************************************************************/\r",
											"try {\r",
											"    if ( uri != dummyUri ) {\r",
											"        logger.log(\"Analysis:\");\r",
											"\r",
											"// statically set on true until updated EthernetContainer definition has been published:\r",
											"wredProfileIsAvail = true; \r",
											"        logger.log(\"  - wredProfileIsAvail: \" + wredProfileIsAvail + \"   (statically set on true until EthernetContainer definition updated!)\");\r",
											"        logger.log(\"  - wredProfileConfigurationIsAvail: \" + wredProfileConfigurationIsAvail)\r",
											"    }\r",
											"\r",
											"} catch (error) {\r",
											"    logger.error(\"! validation could not be completely executed.\")\r",
											"}\r",
											"\r",
											"\r",
											"/****************************************************************************************\r",
											"* Setting Collection Variables\r",
											"****************************************************************************************/\r",
											"try {\r",
											"    pm.collectionVariables.set(\"wredProfileIsAvail\", wredProfileIsAvail);\r",
											"    pm.collectionVariables.set(\"wredProfileConfigurationIsAvail\", wredProfileConfigurationIsAvail)\r",
											"\r",
											"} catch (error) {\r",
											"    logger.error(\"! collection variables could not be set.\")\r",
											"}\r",
											"\r",
											"\r",
											"/****************************************************************************************\r",
											"* Functions\r",
											"****************************************************************************************/\r",
											"function ExtractServerInformation(serverList, searchedServerName) {\r",
											"    try {\r",
											"        for(let i=0; i<serverList.length; i++) {\r",
											"            if(serverList[i].serverName==searchedServerName) {\r",
											"                return serverList[i]\r",
											"            }\r",
											"        }\r",
											"    } catch (error) {\r",
											"        logger.error(\"! serverList not found or faulty\");\r",
											"        return {}\r",
											"    }\r",
											"    logger.warn(\"Server could not be found in serverList.\");\r",
											"    return {}\r",
											"}\r",
											"\r",
											"function FindUuidForProfileType(responseObject, searchedProfileType) {\r",
											"    for(let i=0; i<responseObject[\"core-model-1-4:profile-collection\"][\"profile\"].length; i++) {\r",
											"        let profileName;\r",
											"        try {\r",
											"            profileName = responseObject[\"core-model-1-4:profile-collection\"][\"profile\"][i][\"profile-name\"]\r",
											"        } catch (error) {\r",
											"            profileName = \"\"\r",
											"        }\r",
											"        if( profileName == searchedProfileType ) {\r",
											"            return responseObject[\"core-model-1-4:profile-collection\"][\"profile\"][i][\"uuid\"]\r",
											"        }\r",
											"    }\r",
											"    return \"\"\r",
											"}\r",
											"\r",
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"logger.struc(\"\\n===== EthernetContainerCapability =========================================================\");\r",
											"\r",
											"\r",
											"/****************************************************************************************\r",
											"* Loading Input Data\r",
											"****************************************************************************************/\r",
											"var collectionInfo = {};\r",
											"var serverInfo = {};\r",
											"var dummyServerInfo = {};\r",
											"var uuid = \"\";\r",
											"var localId = \"\";\r",
											"try {\r",
											"    let collectionInputList;\r",
											"    collectionInputList = pm.environment.get(\"collectionInputList\");\r",
											"    collectionInfo = ExtractCollectionInput(collectionInputList, \"WredProfile\");\r",
											"\r",
											"    let serverToBeApplied;\r",
											"    serverToBeApplied = collectionInfo.serverToBeApplied;\r",
											"    let serverList;\r",
											"    serverList = pm.environment.get(\"serverList\");\r",
											"    serverInfo = ExtractServerInformation(serverList, serverToBeApplied);\r",
											"    dummyServerInfo = ExtractServerInformation(serverList, \"dummy\");\r",
											"\r",
											"    let ethernetContainerUuidAndLocalId = {};\r",
											"    ethernetContainerUuidAndLocalId = pm.collectionVariables.get(\"ethernetContainerUuidAndLocalId\");\r",
											"    if ( Object.keys(ethernetContainerUuidAndLocalId).length == 2 ) {\r",
											"        uuid = ethernetContainerUuidAndLocalId.uuid;\r",
											"        localId = ethernetContainerUuidAndLocalId.localId\r",
											"    }\r",
											"\r",
											"} catch (error) {\r",
											"    logger.error(\"! Input data could not be loaded.\")\r",
											"}\r",
											"\r",
											"\r",
											"/****************************************************************************************\r",
											"* Processing\r",
											"****************************************************************************************/\r",
											"\r",
											"\r",
											"/****************************************************************************************\r",
											"* Setting Local Variables and Preparing the Request\r",
											"****************************************************************************************/\r",
											"try {\r",
											"    let filters;\r",
											"    filters = \"\";\r",
											"\r",
											"    let resourcePath;\r",
											"    resourcePath = \"/logical-termination-point={uuid}/layer-protocol={localId}/ethernet-container-2-0:ethernet-container-pac/ethernet-container-capability\";\r",
											"    resourcePath = FillUuidIntoPath(resourcePath, uuid);\r",
											"    resourcePath = FillLocalIdIntoPath(resourcePath, localId);\r",
											"\r",
											"    let pathToControlConstruct;\r",
											"    pathToControlConstruct = serverInfo.pathToControlConstruct;\r",
											"    let mountName;\r",
											"    mountName = collectionInfo.mountName;\r",
											"    pathToControlConstruct = FillMountNameIntoPath(pathToControlConstruct, mountName);\r",
											"\r",
											"    let server;\r",
											"    server = serverInfo.server;\r",
											"\r",
											"    let uri;\r",
											"    if ( (mountName!=\"\") && (uuid!=\"\") && (localId!=\"\") ) {\r",
											"        uri = server + pathToControlConstruct + resourcePath + filters\r",
											"    } else {\r",
											"        logger.warn(\"Input data incomplete.\");\r",
											"        uri = dummyServerInfo.dummyUri\r",
											"    }\r",
											"\r",
											"    let requestBody;\r",
											"    requestBody = '{}';\r",
											"\r",
											"\r",
											"    pm.variables.clear();\r",
											"\r",
											"    pm.variables.set(\"uri\", uri);\r",
											"    pm.variables.set(\"requestBody\", requestBody);\r",
											"    \r",
											"    pm.request.headers.upsert({ key: \"Authorization\", value: serverInfo.authorizationCode });\r",
											"    pm.request.headers.upsert({ key: \"operation-key\", value: serverInfo.operationKey });\r",
											"    pm.request.headers.upsert({ key: \"user\", value: serverInfo.userName });\r",
											"    pm.request.headers.upsert({ key: \"originator\", value: serverInfo.originator });\r",
											"    pm.request.headers.upsert({ key: \"x-correlator\", value: serverInfo.xCorrelator });\r",
											"    pm.request.headers.upsert({ key: \"trace-indicator\", value: serverInfo.traceIndicator });\r",
											"    pm.request.headers.upsert({ key: \"customer-journey\", value: serverInfo.customerJourney });\r",
											"\r",
											"    pm.request.headers.upsert({ key: \"Accept\", value: \"application/json\" });\r",
											"    pm.request.headers.upsert({ key: \"Content-Type\", value: \"application/json\" })\r",
											"\r",
											"} catch (error) {\r",
											"    logger.error(\"! Local variables could not be set.\")\r",
											"}\r",
											"\r",
											"\r",
											"/****************************************************************************************\r",
											"* Functions\r",
											"****************************************************************************************/\r",
											"function FillUuidIntoPath(path, uuid) {\r",
											"    if ( (uuid!=undefined) && (uuid!=null) && (uuid!=\"\") ) {\r",
											"      let subStringToBeReplaced = \"{uuid}\";\r",
											"      let indexOfStartOfSubStringToBeReplaced = path.lastIndexOf(subStringToBeReplaced);\r",
											"      let precedingSubString = path.slice(0, indexOfStartOfSubStringToBeReplaced);\r",
											"      let indexOfEndOfSubStringToBeReplaced = indexOfStartOfSubStringToBeReplaced + subStringToBeReplaced.length;\r",
											"      let subsequentSubString = path.slice(indexOfEndOfSubStringToBeReplaced);\r",
											"      path = precedingSubString + uuid + subsequentSubString;\r",
											"      return path\r",
											"    } else {\r",
											"      return path\r",
											"    }\r",
											"}\r",
											"\r",
											"function FillLocalIdIntoPath(path, localId) {\r",
											"    if ( (localId!=undefined) && (localId!=null) && (localId!=\"\") ) {\r",
											"      let subStringToBeReplaced = \"{localId}\";\r",
											"      let indexOfStartOfSubStringToBeReplaced = path.lastIndexOf(subStringToBeReplaced);\r",
											"      let precedingSubString = path.slice(0, indexOfStartOfSubStringToBeReplaced);\r",
											"      let indexOfEndOfSubStringToBeReplaced = indexOfStartOfSubStringToBeReplaced + subStringToBeReplaced.length;\r",
											"      let subsequentSubString = path.slice(indexOfEndOfSubStringToBeReplaced);\r",
											"      path = precedingSubString + localId + subsequentSubString;\r",
											"      return path\r",
											"    } else {\r",
											"      return path\r",
											"    }\r",
											"}\r",
											"\r",
											"function FillMountNameIntoPath(path, mountName) {\r",
											"  let subStringToBeReplaced = \"{mountName}\";\r",
											"  let indexOfStartOfSubStringToBeReplaced = path.lastIndexOf(subStringToBeReplaced);\r",
											"  let precedingSubString = path.slice(0, indexOfStartOfSubStringToBeReplaced);\r",
											"  let indexOfEndOfSubStringToBeReplaced = indexOfStartOfSubStringToBeReplaced + subStringToBeReplaced.length;\r",
											"  let subsequentSubString = path.slice(indexOfEndOfSubStringToBeReplaced);\r",
											"  path = precedingSubString + mountName + subsequentSubString;\r",
											"  return path\r",
											"}\r",
											"\r",
											"function ExtractServerInformation(serverList, searchedServerName) {\r",
											"    try {\r",
											"        for(let i=0; i<serverList.length; i++) {\r",
											"            if(serverList[i].serverName==searchedServerName) {\r",
											"                return serverList[i]\r",
											"            }\r",
											"        }\r",
											"    } catch (error) {\r",
											"        logger.error(\"! serverList not found or faulty\");\r",
											"        return {}\r",
											"    }\r",
											"    logger.warn(\"Server could not be found in serverList.\");\r",
											"    return {}\r",
											"}\r",
											"\r",
											"function ExtractCollectionInput(collectionInputList, searchedCollection) {\r",
											"    try {\r",
											"        for(let i=0; i<collectionInputList.length; i++) {\r",
											"            if(collectionInputList[i].collectionName==searchedCollection) {\r",
											"                return collectionInputList[i]\r",
											"            }\r",
											"        }\r",
											"    } catch (error) {\r",
											"        logger.error(\"! collectionInputList not found or faulty\");\r",
											"        return {}\r",
											"    }\r",
											"    logger.warn(\"Collection could not be found in collectionInputList.\");\r",
											"    return {}\r",
											"}\r",
											"\r",
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"auth": {
									"type": "noauth"
								},
								"method": "GET",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{{requestBody}}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{uri}}",
									"host": [
										"{{uri}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "profile-collection",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"/****************************************************************************************\r",
											"* Loading Input Data\r",
											"****************************************************************************************/\r",
											"var uri;\r",
											"var dummyUri;\r",
											"try {\r",
											"    uri = pm.variables.get(\"uri\");\r",
											"\r",
											"    let serverList;\r",
											"    serverList = pm.environment.get(\"serverList\");\r",
											"    let dummyServerInfo;\r",
											"    dummyServerInfo = ExtractServerInformation(serverList, \"dummy\");\r",
											"    dummyUri = dummyServerInfo.dummyUri;\r",
											"\r",
											"} catch (error) {\r",
											"    logger.error(\"! Input data could not be loaded.\")\r",
											"}\r",
											"\r",
											"\r",
											"/****************************************************************************************\r",
											"* Extracting Result\r",
											"****************************************************************************************/\r",
											"var responseCode;\r",
											"var responseObject = {};\r",
											"var wredProfileUuid = \"\";\r",
											"try {\r",
											"    if ( uri != dummyUri ) {\r",
											"        let response;\r",
											"        response = pm.response;\r",
											"\r",
											"        responseCode = parseInt(response.code);\r",
											"\r",
											"        if ( Math.floor(responseCode/100) === 2 ) {\r",
											"            responseObject = JSON.parse(response.stream);\r",
											"\r",
											"            let profileName;\r",
											"            profileName = \"wred-profile-1-0:PROFILE_NAME_TYPE_WRED_PROFILE\";\r",
											"            wredProfileUuid = FindUuidForProfileType(responseObject, profileName);\r",
											"\r",
											"        } else {\r",
											"            pm.test(\"List of Profile instances could be loaded\", function () {\r",
											"                pm.expect(false).to.be.true\r",
											"            });\r",
											"            logger.log(\"FAIL: List of Profile instances could not be loaded\")\r",
											"        }\r",
											"\r",
											"    }\r",
											"\r",
											"} catch (error) {\r",
											"    logger.error(\"! result could not be extracted.\")\r",
											"}\r",
											"\r",
											"\r",
											"/****************************************************************************************\r",
											"* Processing\r",
											"****************************************************************************************/\r",
											"try {\r",
											"    if ( uri != dummyUri ) {\r",
											"        logger.log(\"Analysis:\");\r",
											"        if ( wredProfileUuid != \"\" ) {\r",
											"            logger.log(\"  - wredProfileUuid: \" + wredProfileUuid)\r",
											"        } else {\r",
											"            logger.log(\"  - No instance of WredProfile found\")\r",
											"        }\r",
											"    }\r",
											"\r",
											"} catch (error) {\r",
											"    logger.error(\"! validation could not be completely executed.\")\r",
											"}\r",
											"\r",
											"\r",
											"/****************************************************************************************\r",
											"* Setting Collection Variables\r",
											"****************************************************************************************/\r",
											"try {\r",
											"    pm.collectionVariables.set(\"wredProfileUuid\", wredProfileUuid);\r",
											"\r",
											"} catch (error) {\r",
											"    logger.error(\"! collection variables could not be set.\")\r",
											"}\r",
											"\r",
											"\r",
											"/****************************************************************************************\r",
											"* Functions\r",
											"****************************************************************************************/\r",
											"function ExtractServerInformation(serverList, searchedServerName) {\r",
											"    try {\r",
											"        for(let i=0; i<serverList.length; i++) {\r",
											"            if(serverList[i].serverName==searchedServerName) {\r",
											"                return serverList[i]\r",
											"            }\r",
											"        }\r",
											"    } catch (error) {\r",
											"        logger.error(\"! serverList not found or faulty\");\r",
											"        return {}\r",
											"    }\r",
											"    logger.warn(\"Server could not be found in serverList.\");\r",
											"    return {}\r",
											"}\r",
											"\r",
											"function FindUuidForProfileType(responseObject, searchedProfileType) {\r",
											"    for(let i=0; i<responseObject[\"core-model-1-4:profile-collection\"][\"profile\"].length; i++) {\r",
											"        let profileName;\r",
											"        try {\r",
											"            profileName = responseObject[\"core-model-1-4:profile-collection\"][\"profile\"][i][\"profile-name\"]\r",
											"        } catch (error) {\r",
											"            profileName = \"\"\r",
											"        }\r",
											"        if( profileName == searchedProfileType ) {\r",
											"            return responseObject[\"core-model-1-4:profile-collection\"][\"profile\"][i][\"uuid\"]\r",
											"        }\r",
											"    }\r",
											"    return \"\"\r",
											"}\r",
											"\r",
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"logger.struc(\"\\n===== ProfileCollection ===================================================================\");\r",
											"\r",
											"\r",
											"/****************************************************************************************\r",
											"* Loading Input Data\r",
											"****************************************************************************************/\r",
											"var collectionInfo = {};\r",
											"var serverInfo = {};\r",
											"var dummyServerInfo = {};\r",
											"var wredProfileIsAvail = false;\r",
											"try {\r",
											"    let collectionInputList;\r",
											"    collectionInputList = pm.environment.get(\"collectionInputList\");\r",
											"    collectionInfo = ExtractCollectionInput(collectionInputList, \"WredProfile\");\r",
											"\r",
											"    let serverToBeApplied;\r",
											"    serverToBeApplied = collectionInfo.serverToBeApplied;\r",
											"    let serverList;\r",
											"    serverList = pm.environment.get(\"serverList\");\r",
											"    serverInfo = ExtractServerInformation(serverList, serverToBeApplied);\r",
											"    dummyServerInfo = ExtractServerInformation(serverList, \"dummy\");\r",
											"\r",
											"    wredProfileIsAvail = pm.collectionVariables.get(\"wredProfileIsAvail\")\r",
											"\r",
											"} catch (error) {\r",
											"    logger.error(\"! Input data could not be loaded.\")\r",
											"}\r",
											"\r",
											"\r",
											"/****************************************************************************************\r",
											"* Processing\r",
											"****************************************************************************************/\r",
											"\r",
											"\r",
											"/****************************************************************************************\r",
											"* Setting Local Variables and Preparing the Request\r",
											"****************************************************************************************/\r",
											"try {\r",
											"    let filters;\r",
											"    filters = \"?fields=profile(uuid;profile-name)\";\r",
											"    filters = UrlEncodeFieldsFilterString(filters);\r",
											"\r",
											"    let resourcePath;\r",
											"    resourcePath = \"/profile-collection\";\r",
											"\r",
											"    let pathToControlConstruct;\r",
											"    pathToControlConstruct = serverInfo.pathToControlConstruct;\r",
											"    let mountName;\r",
											"    mountName = collectionInfo.mountName;\r",
											"    pathToControlConstruct = FillMountNameIntoPath(pathToControlConstruct, mountName);\r",
											"\r",
											"    let server;\r",
											"    server = serverInfo.server;\r",
											"\r",
											"    let uri;\r",
											"    if ( mountName != \"\" ) {\r",
											"        if ( wredProfileIsAvail == true ) {\r",
											"            uri = server + pathToControlConstruct + resourcePath + filters\r",
											"        } else {\r",
											"            logger.warn(\"Feature not supported.\");\r",
											"            uri = dummyServerInfo.dummyUri\r",
											"        }\r",
											"\r",
											"    } else {\r",
											"        logger.warn(\"Input data incomplete.\");\r",
											"        uri = dummyServerInfo.dummyUri\r",
											"    }\r",
											"\r",
											"    let requestBody;\r",
											"    requestBody = '{}';\r",
											"\r",
											"\r",
											"    pm.variables.clear();\r",
											"\r",
											"    pm.variables.set(\"uri\", uri);\r",
											"    pm.variables.set(\"requestBody\", requestBody);\r",
											"    \r",
											"    pm.request.headers.upsert({ key: \"Authorization\", value: serverInfo.authorizationCode });\r",
											"    pm.request.headers.upsert({ key: \"operation-key\", value: serverInfo.operationKey });\r",
											"    pm.request.headers.upsert({ key: \"user\", value: serverInfo.userName });\r",
											"    pm.request.headers.upsert({ key: \"originator\", value: serverInfo.originator });\r",
											"    pm.request.headers.upsert({ key: \"x-correlator\", value: serverInfo.xCorrelator });\r",
											"    pm.request.headers.upsert({ key: \"trace-indicator\", value: serverInfo.traceIndicator });\r",
											"    pm.request.headers.upsert({ key: \"customer-journey\", value: serverInfo.customerJourney });\r",
											"\r",
											"    pm.request.headers.upsert({ key: \"Accept\", value: \"application/json\" });\r",
											"    pm.request.headers.upsert({ key: \"Content-Type\", value: \"application/json\" })\r",
											"\r",
											"} catch (error) {\r",
											"    logger.error(\"! Local variables could not be set.\")\r",
											"}\r",
											"\r",
											"\r",
											"/****************************************************************************************\r",
											"* Functions\r",
											"****************************************************************************************/\r",
											"function ReplaceSubstringByNewstringInInputstring(inputstring, substring, newstring) {\r",
											"    try {\r",
											"        let indexOfStartOfSubstring = inputstring.lastIndexOf(substring);\r",
											"        while ( indexOfStartOfSubstring != -1 ) {\r",
											"            let precedingSubString = inputstring.slice(0, indexOfStartOfSubstring);\r",
											"            let indexOfEndOfSubstring = indexOfStartOfSubstring + substring.length;\r",
											"            let subsequentSubString = inputstring.slice(indexOfEndOfSubstring);\r",
											"            inputstring = precedingSubString + newstring + subsequentSubString;\r",
											"\r",
											"            indexOfStartOfSubstring = inputstring.lastIndexOf(substring)\r",
											"        }\r",
											"\r",
											"    } catch (error) {\r",
											"        inputstring = \"-1\";\r",
											"        logger.error(\"! Substring could not be replaced by Newstring\")\r",
											"    }\r",
											"\r",
											"    return inputstring\r",
											"}\r",
											"\r",
											"function UrlEncodeFieldsFilterString(filters) {\r",
											"    filters = ReplaceSubstringByNewstringInInputstring(filters, \"(\", \"%28\");\r",
											"    filters = ReplaceSubstringByNewstringInInputstring(filters, \")\", \"%29\");\r",
											"    filters = ReplaceSubstringByNewstringInInputstring(filters, \":\", \"%3A\");\r",
											"    filters = ReplaceSubstringByNewstringInInputstring(filters, \";\", \"%3B\");\r",
											"    return filters\r",
											"}\r",
											"\r",
											"function FillUuidIntoPath(path, uuid) {\r",
											"    if ( (uuid!=undefined) && (uuid!=null) && (uuid!=\"\") ) {\r",
											"      let subStringToBeReplaced = \"{uuid}\";\r",
											"      let indexOfStartOfSubStringToBeReplaced = path.lastIndexOf(subStringToBeReplaced);\r",
											"      let precedingSubString = path.slice(0, indexOfStartOfSubStringToBeReplaced);\r",
											"      let indexOfEndOfSubStringToBeReplaced = indexOfStartOfSubStringToBeReplaced + subStringToBeReplaced.length;\r",
											"      let subsequentSubString = path.slice(indexOfEndOfSubStringToBeReplaced);\r",
											"      path = precedingSubString + uuid + subsequentSubString;\r",
											"      return path\r",
											"    } else {\r",
											"      return path\r",
											"    }\r",
											"}\r",
											"\r",
											"function FillLocalIdIntoPath(path, localId) {\r",
											"    if ( (localId!=undefined) && (localId!=null) && (localId!=\"\") ) {\r",
											"      let subStringToBeReplaced = \"{localId}\";\r",
											"      let indexOfStartOfSubStringToBeReplaced = path.lastIndexOf(subStringToBeReplaced);\r",
											"      let precedingSubString = path.slice(0, indexOfStartOfSubStringToBeReplaced);\r",
											"      let indexOfEndOfSubStringToBeReplaced = indexOfStartOfSubStringToBeReplaced + subStringToBeReplaced.length;\r",
											"      let subsequentSubString = path.slice(indexOfEndOfSubStringToBeReplaced);\r",
											"      path = precedingSubString + localId + subsequentSubString;\r",
											"      return path\r",
											"    } else {\r",
											"      return path\r",
											"    }\r",
											"}\r",
											"\r",
											"function FillMountNameIntoPath(path, mountName) {\r",
											"  let subStringToBeReplaced = \"{mountName}\";\r",
											"  let indexOfStartOfSubStringToBeReplaced = path.lastIndexOf(subStringToBeReplaced);\r",
											"  let precedingSubString = path.slice(0, indexOfStartOfSubStringToBeReplaced);\r",
											"  let indexOfEndOfSubStringToBeReplaced = indexOfStartOfSubStringToBeReplaced + subStringToBeReplaced.length;\r",
											"  let subsequentSubString = path.slice(indexOfEndOfSubStringToBeReplaced);\r",
											"  path = precedingSubString + mountName + subsequentSubString;\r",
											"  return path\r",
											"}\r",
											"\r",
											"function ExtractServerInformation(serverList, searchedServerName) {\r",
											"    try {\r",
											"        for(let i=0; i<serverList.length; i++) {\r",
											"            if(serverList[i].serverName==searchedServerName) {\r",
											"                return serverList[i]\r",
											"            }\r",
											"        }\r",
											"    } catch (error) {\r",
											"        logger.error(\"! serverList not found or faulty\");\r",
											"        return {}\r",
											"    }\r",
											"    logger.warn(\"Server could not be found in serverList.\");\r",
											"    return {}\r",
											"}\r",
											"\r",
											"function ExtractCollectionInput(collectionInputList, searchedCollection) {\r",
											"    try {\r",
											"        for(let i=0; i<collectionInputList.length; i++) {\r",
											"            if(collectionInputList[i].collectionName==searchedCollection) {\r",
											"                return collectionInputList[i]\r",
											"            }\r",
											"        }\r",
											"    } catch (error) {\r",
											"        logger.error(\"! collectionInputList not found or faulty\");\r",
											"        return {}\r",
											"    }\r",
											"    logger.warn(\"Collection could not be found in collectionInputList.\");\r",
											"    return {}\r",
											"}\r",
											"\r",
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"auth": {
									"type": "noauth"
								},
								"method": "GET",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{{requestBody}}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{uri}}",
									"host": [
										"{{uri}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "wred-profile-capability",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"/****************************************************************************************\r",
											"* Loading Input Data\r",
											"****************************************************************************************/\r",
											"var uri;\r",
											"var dummyUri;\r",
											"try {\r",
											"    uri = pm.variables.get(\"uri\");\r",
											"\r",
											"    let serverList;\r",
											"    serverList = pm.environment.get(\"serverList\");\r",
											"    let dummyServerInfo;\r",
											"    dummyServerInfo = ExtractServerInformation(serverList, \"dummy\");\r",
											"    dummyUri = dummyServerInfo.dummyUri;\r",
											"\r",
											"} catch (error) {\r",
											"    logger.error(\"! Input data could not be loaded.\")\r",
											"}\r",
											"\r",
											"\r",
											"/****************************************************************************************\r",
											"* Extracting Result\r",
											"****************************************************************************************/\r",
											"var responseCode;\r",
											"var responseObject = {};\r",
											"var wredProfileCapability = {};\r",
											"try {\r",
											"    if ( uri != dummyUri ) {\r",
											"        let response;\r",
											"        response = pm.response;\r",
											"\r",
											"        responseCode = parseInt(response.code);\r",
											"\r",
											"        if ( Math.floor(responseCode/100) === 2 ) {\r",
											"            responseObject = JSON.parse(response.stream);\r",
											"\r",
											"            wredProfileCapability = responseObject[\"wred-profile-1-0:wred-profile-capability\"]\r",
											"\r",
											"        }\r",
											"\r",
											"    }\r",
											"\r",
											"} catch (error) {\r",
											"    logger.error(\"! result could not be extracted.\")\r",
											"}\r",
											"\r",
											"\r",
											"/****************************************************************************************\r",
											"* Processing\r",
											"****************************************************************************************/\r",
											"var reference;\r",
											"try {\r",
											"    reference = {\r",
											"        \"type\": \"object\",\r",
											"        \"required\": [\r",
											"            \"wred-profile-1-0:wred-profile-capability\"\r",
											"        ],\r",
											"        \"properties\": {\r",
											"            \"wred-profile-1-0:wred-profile-capability\": {\r",
											"                \"type\": \"object\",\r",
											"                \"required\": [\r",
											"                    \"available-buffer-size\",\r",
											"                    \"drop-probability-at-threshold-low-is-avail\",\r",
											"                    \"gentle-wred-is-avail\",\r",
											"                    \"sensitivity-setting-is-avail\",\r",
											"                    \"coloring-is-avail\"\r",
											"                ],\r",
											"                \"properties\": {\r",
											"                    \"available-buffer-size\": {\r",
											"                        \"type\": \"integer\",\r",
											"                        \"format\": \"int32\"\r",
											"                    },\r",
											"                    \"drop-probability-at-threshold-low-is-avail\": {\r",
											"                        \"type\": \"boolean\"\r",
											"                    },\r",
											"                    \"gentle-wred-is-avail\": {\r",
											"                        \"type\": \"boolean\"\r",
											"                    },\r",
											"                    \"sensitivity-setting-is-avail\": {\r",
											"                        \"type\": \"boolean\"\r",
											"                    },\r",
											"                    \"coloring-is-avail\": {\r",
											"                        \"type\": \"boolean\"\r",
											"                    }\r",
											"                }\r",
											"            }\r",
											"        }\r",
											"    }\r",
											"\r",
											"} catch (error) {\r",
											"    logger.error(\"! reference could not be defined.\")\r",
											"}\r",
											"\r",
											"try {\r",
											"    if ( uri != dummyUri ) {\r",
											"        logger.log(\"Analysis:\");\r",
											"\r",
											"        pm.test(\"WredProfileCapability could be loaded\", function () {\r",
											"            pm.expect(responseCode).to.equal(200)\r",
											"        });\r",
											"        if ( responseCode == 200 ) {\r",
											"            logger.log(\"  - ok: WredProfileCapability could be loaded\")\r",
											"        } else {\r",
											"            logger.log(\"  - FAIL: WredProfileCapability could not be loaded \" + responseCode + \" instead of 200\")\r",
											"        }\r",
											"\r",
											"        if ( Object.keys(responseObject).length != 0 ) {\r",
											"            logger.log(\"Reference Schema:\");\r",
											"            logger.log(reference);\r",
											"\r",
											"            logger.log(\"Interface Response:\");\r",
											"            logger.log(responseObject);\r",
											"\r",
											"            let validationResult;\r",
											"            validationResult = tv4.validateMultiple(responseObject, reference, true, true);\r",
											"            logger.log(\"Validation Result:\");\r",
											"            logger.log(validationResult);\r",
											"\r",
											"            pm.test(\"Response matches schema definition\", function () {\r",
											"                pm.expect(validationResult.errors.length).to.equal(0)\r",
											"            });\r",
											"            if (validationResult.errors.length==0) {\r",
											"                logger.log(\"  - ok: Response matches schema definition\")\r",
											"            } else {\r",
											"                logger.log(\"  - FAIL: Response matches schema definition\")\r",
											"            }\r",
											"\r",
											"        }\r",
											"\r",
											"    }\r",
											"\r",
											"} catch (error) {\r",
											"    logger.error(\"! validation could not be completely executed.\")\r",
											"}\r",
											"\r",
											"\r",
											"/****************************************************************************************\r",
											"* Setting Collection Variables\r",
											"****************************************************************************************/\r",
											"try {\r",
											"    pm.collectionVariables.set(\"wredProfileCapability\", wredProfileCapability)\r",
											"\r",
											"} catch (error) {\r",
											"    logger.error(\"! collection variables could not be set.\")\r",
											"}\r",
											"\r",
											"\r",
											"/****************************************************************************************\r",
											"* Functions\r",
											"****************************************************************************************/\r",
											"function ExtractServerInformation(serverList, searchedServerName) {\r",
											"    try {\r",
											"        for(let i=0; i<serverList.length; i++) {\r",
											"            if(serverList[i].serverName==searchedServerName) {\r",
											"                return serverList[i]\r",
											"            }\r",
											"        }\r",
											"    } catch (error) {\r",
											"        logger.error(\"! serverList not found or faulty\");\r",
											"        return {}\r",
											"    }\r",
											"    logger.warn(\"Server could not be found in serverList.\");\r",
											"    return {}\r",
											"}\r",
											"\r",
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"logger.struc(\"\\n===== WredProfileCapability ===============================================================\");\r",
											"\r",
											"\r",
											"/****************************************************************************************\r",
											"* Loading Input Data\r",
											"****************************************************************************************/\r",
											"var collectionInfo = {};\r",
											"var serverInfo = {};\r",
											"var dummyServerInfo = {};\r",
											"var wredProfileUuid = \"\";\r",
											"try {\r",
											"    let collectionInputList;\r",
											"    collectionInputList = pm.environment.get(\"collectionInputList\");\r",
											"    collectionInfo = ExtractCollectionInput(collectionInputList, \"WredProfile\");\r",
											"\r",
											"    let serverToBeApplied;\r",
											"    serverToBeApplied = collectionInfo.serverToBeApplied;\r",
											"    let serverList;\r",
											"    serverList = pm.environment.get(\"serverList\");\r",
											"    serverInfo = ExtractServerInformation(serverList, serverToBeApplied);\r",
											"    dummyServerInfo = ExtractServerInformation(serverList, \"dummy\");\r",
											"\r",
											"    wredProfileUuid = pm.collectionVariables.get(\"wredProfileUuid\")\r",
											"\r",
											"} catch (error) {\r",
											"    logger.error(\"! Input data could not be loaded.\")\r",
											"}\r",
											"\r",
											"\r",
											"/****************************************************************************************\r",
											"* Processing\r",
											"****************************************************************************************/\r",
											"\r",
											"\r",
											"/****************************************************************************************\r",
											"* Setting Local Variables and Preparing the Request\r",
											"****************************************************************************************/\r",
											"try {\r",
											"    let filters;\r",
											"    filters = \"\";\r",
											"\r",
											"    let resourcePath;\r",
											"    let uuid = \"\";\r",
											"    resourcePath = \"/profile-collection/profile={uuid}/wred-profile-1-0:wred-profile-pac/wred-profile-capability\";\r",
											"    uuid = wredProfileUuid;\r",
											"    resourcePath = FillUuidIntoPath(resourcePath, uuid);\r",
											"\r",
											"    let pathToControlConstruct;\r",
											"    pathToControlConstruct = serverInfo.pathToControlConstruct;\r",
											"    let mountName;\r",
											"    mountName = collectionInfo.mountName;\r",
											"    pathToControlConstruct = FillMountNameIntoPath(pathToControlConstruct, mountName);\r",
											"\r",
											"    let server;\r",
											"    server = serverInfo.server;\r",
											"\r",
											"    let uri;\r",
											"    if ( (mountName!=\"\") && (wredProfileUuid!=\"\") && (wredProfileUuid!=undefined) ) {\r",
											"        uri = server + pathToControlConstruct + resourcePath + filters\r",
											"    } else {\r",
											"        logger.warn(\"Input data incomplete.\");\r",
											"        uri = dummyServerInfo.dummyUri\r",
											"    }\r",
											"\r",
											"    let requestBody;\r",
											"    requestBody = '{}';\r",
											"\r",
											"\r",
											"    pm.variables.clear();\r",
											"\r",
											"    pm.variables.set(\"uri\", uri);\r",
											"    pm.variables.set(\"requestBody\", requestBody);\r",
											"    \r",
											"    pm.request.headers.upsert({ key: \"Authorization\", value: serverInfo.authorizationCode });\r",
											"    pm.request.headers.upsert({ key: \"operation-key\", value: serverInfo.operationKey });\r",
											"    pm.request.headers.upsert({ key: \"user\", value: serverInfo.userName });\r",
											"    pm.request.headers.upsert({ key: \"originator\", value: serverInfo.originator });\r",
											"    pm.request.headers.upsert({ key: \"x-correlator\", value: serverInfo.xCorrelator });\r",
											"    pm.request.headers.upsert({ key: \"trace-indicator\", value: serverInfo.traceIndicator });\r",
											"    pm.request.headers.upsert({ key: \"customer-journey\", value: serverInfo.customerJourney });\r",
											"\r",
											"    pm.request.headers.upsert({ key: \"Accept\", value: \"application/json\" });\r",
											"    pm.request.headers.upsert({ key: \"Content-Type\", value: \"application/json\" })\r",
											"\r",
											"} catch (error) {\r",
											"    logger.error(\"! Local variables could not be set.\")\r",
											"}\r",
											"\r",
											"\r",
											"/****************************************************************************************\r",
											"* Functions\r",
											"****************************************************************************************/\r",
											"function FillUuidIntoPath(path, uuid) {\r",
											"    if ( (uuid!=undefined) && (uuid!=null) && (uuid!=\"\") ) {\r",
											"      let subStringToBeReplaced = \"{uuid}\";\r",
											"      let indexOfStartOfSubStringToBeReplaced = path.lastIndexOf(subStringToBeReplaced);\r",
											"      let precedingSubString = path.slice(0, indexOfStartOfSubStringToBeReplaced);\r",
											"      let indexOfEndOfSubStringToBeReplaced = indexOfStartOfSubStringToBeReplaced + subStringToBeReplaced.length;\r",
											"      let subsequentSubString = path.slice(indexOfEndOfSubStringToBeReplaced);\r",
											"      path = precedingSubString + uuid + subsequentSubString;\r",
											"      return path\r",
											"    } else {\r",
											"      return path\r",
											"    }\r",
											"}\r",
											"\r",
											"function FillLocalIdIntoPath(path, localId) {\r",
											"    if ( (localId!=undefined) && (localId!=null) && (localId!=\"\") ) {\r",
											"      let subStringToBeReplaced = \"{localId}\";\r",
											"      let indexOfStartOfSubStringToBeReplaced = path.lastIndexOf(subStringToBeReplaced);\r",
											"      let precedingSubString = path.slice(0, indexOfStartOfSubStringToBeReplaced);\r",
											"      let indexOfEndOfSubStringToBeReplaced = indexOfStartOfSubStringToBeReplaced + subStringToBeReplaced.length;\r",
											"      let subsequentSubString = path.slice(indexOfEndOfSubStringToBeReplaced);\r",
											"      path = precedingSubString + localId + subsequentSubString;\r",
											"      return path\r",
											"    } else {\r",
											"      return path\r",
											"    }\r",
											"}\r",
											"\r",
											"function FillMountNameIntoPath(path, mountName) {\r",
											"  let subStringToBeReplaced = \"{mountName}\";\r",
											"  let indexOfStartOfSubStringToBeReplaced = path.lastIndexOf(subStringToBeReplaced);\r",
											"  let precedingSubString = path.slice(0, indexOfStartOfSubStringToBeReplaced);\r",
											"  let indexOfEndOfSubStringToBeReplaced = indexOfStartOfSubStringToBeReplaced + subStringToBeReplaced.length;\r",
											"  let subsequentSubString = path.slice(indexOfEndOfSubStringToBeReplaced);\r",
											"  path = precedingSubString + mountName + subsequentSubString;\r",
											"  return path\r",
											"}\r",
											"\r",
											"function ExtractServerInformation(serverList, searchedServerName) {\r",
											"    try {\r",
											"        for(let i=0; i<serverList.length; i++) {\r",
											"            if(serverList[i].serverName==searchedServerName) {\r",
											"                return serverList[i]\r",
											"            }\r",
											"        }\r",
											"    } catch (error) {\r",
											"        logger.error(\"! serverList not found or faulty\");\r",
											"        return {}\r",
											"    }\r",
											"    logger.warn(\"Server could not be found in serverList.\");\r",
											"    return {}\r",
											"}\r",
											"\r",
											"function ExtractCollectionInput(collectionInputList, searchedCollection) {\r",
											"    try {\r",
											"        for(let i=0; i<collectionInputList.length; i++) {\r",
											"            if(collectionInputList[i].collectionName==searchedCollection) {\r",
											"                return collectionInputList[i]\r",
											"            }\r",
											"        }\r",
											"    } catch (error) {\r",
											"        logger.error(\"! collectionInputList not found or faulty\");\r",
											"        return {}\r",
											"    }\r",
											"    logger.warn(\"Collection could not be found in collectionInputList.\");\r",
											"    return {}\r",
											"}\r",
											"\r",
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"auth": {
									"type": "noauth"
								},
								"method": "GET",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{{requestBody}}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{uri}}",
									"host": [
										"{{uri}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "wred-profile-configuration",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"/****************************************************************************************\r",
											"* Loading Input Data\r",
											"****************************************************************************************/\r",
											"var uri;\r",
											"var dummyUri;\r",
											"try {\r",
											"    uri = pm.variables.get(\"uri\");\r",
											"\r",
											"    let serverList;\r",
											"    serverList = pm.environment.get(\"serverList\");\r",
											"    let dummyServerInfo;\r",
											"    dummyServerInfo = ExtractServerInformation(serverList, \"dummy\");\r",
											"    dummyUri = dummyServerInfo.dummyUri;\r",
											"\r",
											"} catch (error) {\r",
											"    logger.error(\"! Input data could not be loaded.\")\r",
											"}\r",
											"\r",
											"\r",
											"/****************************************************************************************\r",
											"* Extracting Result\r",
											"****************************************************************************************/\r",
											"var responseCode;\r",
											"var responseObject = {};\r",
											"try {\r",
											"    if ( uri != dummyUri ) {\r",
											"        let response;\r",
											"        response = pm.response;\r",
											"\r",
											"        responseCode = parseInt(response.code);\r",
											"\r",
											"        if ( Math.floor(responseCode/100) === 2 ) {\r",
											"            responseObject = JSON.parse(response.stream);\r",
											"\r",
											"        }\r",
											"\r",
											"    }\r",
											"\r",
											"} catch (error) {\r",
											"    logger.error(\"! result could not be extracted.\")\r",
											"}\r",
											"\r",
											"\r",
											"/****************************************************************************************\r",
											"* Processing\r",
											"****************************************************************************************/\r",
											"var reference;\r",
											"try {\r",
											"    reference = {\r",
											"        \"type\": \"object\",\r",
											"        \"required\": [\r",
											"            \"wred-profile-1-0:wred-profile-configuration\"\r",
											"        ],\r",
											"        \"properties\": {\r",
											"            \"wred-profile-1-0:wred-profile-configuration\": {\r",
											"                \"type\": \"object\",\r",
											"                \"required\": [\r",
											"                    \"external-label\",\r",
											"                    \"threshold-low\",\r",
											"                    \"drop-probability-at-threshold-low\",\r",
											"                    \"threshold-high\",\r",
											"                    \"drop-probability-at-threshold-high\",\r",
											"                    \"gentle-wred-is-on\",\r",
											"                    \"threshold-gentle\",\r",
											"                    \"sensitivity\",\r",
											"                    \"coloring-is-on\"\r",
											"                ],\r",
											"                \"properties\": {\r",
											"                    \"external-label\": {\r",
											"                        \"type\": \"string\"\r",
											"                    },\r",
											"                    \"threshold-low\": {\r",
											"                        \"type\": \"integer\",\r",
											"                        \"format\": \"int32\"\r",
											"                    },\r",
											"                    \"drop-probability-at-threshold-low\": {\r",
											"                        \"type\": \"integer\",\r",
											"                        \"format\": \"int8\"\r",
											"                    },\r",
											"                    \"threshold-high\": {\r",
											"                        \"type\": \"integer\",\r",
											"                        \"format\": \"int32\"\r",
											"                    },\r",
											"                    \"drop-probability-at-threshold-high\": {\r",
											"                        \"type\": \"integer\",\r",
											"                        \"format\": \"int8\"\r",
											"                    },\r",
											"                    \"gentle-wred-is-on\": {\r",
											"                        \"type\": \"boolean\"\r",
											"                    },\r",
											"                    \"threshold-gentle\": {\r",
											"                        \"type\": \"integer\",\r",
											"                        \"format\": \"int32\"\r",
											"                    },\r",
											"                    \"sensitivity\": {\r",
											"                        \"type\": \"integer\",\r",
											"                        \"format\": \"int8\"\r",
											"                    },\r",
											"                    \"coloring-is-on\": {\r",
											"                        \"type\": \"boolean\"\r",
											"                    }\r",
											"                }\r",
											"            }\r",
											"        }\r",
											"    }\r",
											"\r",
											"} catch (error) {\r",
											"    logger.error(\"! reference could not be defined.\")\r",
											"}\r",
											"\r",
											"try {\r",
											"    if ( uri != dummyUri ) {\r",
											"        logger.log(\"Analysis:\");\r",
											"\r",
											"        pm.test(\"WredProfileConfiguration could be loaded\", function () {\r",
											"            pm.expect(responseCode).to.equal(200)\r",
											"        });\r",
											"        if ( responseCode == 200 ) {\r",
											"            logger.log(\"  - ok: WredProfileConfiguration could be loaded\")\r",
											"        } else {\r",
											"            logger.log(\"  - FAIL: WredProfileConfiguration could not be loaded \" + responseCode + \" instead of 200\")\r",
											"        }\r",
											"\r",
											"        if ( Object.keys(responseObject).length != 0 ) {\r",
											"            logger.log(\"Reference Schema:\");\r",
											"            logger.log(reference);\r",
											"\r",
											"            logger.log(\"Interface Response:\");\r",
											"            logger.log(responseObject);\r",
											"\r",
											"            let validationResult;\r",
											"            validationResult = tv4.validateMultiple(responseObject, reference, true, true);\r",
											"            logger.log(\"Validation Result:\");\r",
											"            logger.log(validationResult);\r",
											"\r",
											"            pm.test(\"Response matches schema definition\", function () {\r",
											"                pm.expect(validationResult.errors.length).to.equal(0)\r",
											"            });\r",
											"            if (validationResult.errors.length==0) {\r",
											"                logger.log(\"  - ok: Response matches schema definition\")\r",
											"            } else {\r",
											"                logger.log(\"  - FAIL: Response matches schema definition\")\r",
											"            }\r",
											"\r",
											"        }\r",
											"\r",
											"    }\r",
											"\r",
											"} catch (error) {\r",
											"    logger.error(\"! validation could not be completely executed.\")\r",
											"}\r",
											"\r",
											"\r",
											"/****************************************************************************************\r",
											"* Setting Collection Variables\r",
											"****************************************************************************************/\r",
											"\r",
											"\r",
											"/****************************************************************************************\r",
											"* Functions\r",
											"****************************************************************************************/\r",
											"function ExtractServerInformation(serverList, searchedServerName) {\r",
											"    try {\r",
											"        for(let i=0; i<serverList.length; i++) {\r",
											"            if(serverList[i].serverName==searchedServerName) {\r",
											"                return serverList[i]\r",
											"            }\r",
											"        }\r",
											"    } catch (error) {\r",
											"        logger.error(\"! serverList not found or faulty\");\r",
											"        return {}\r",
											"    }\r",
											"    logger.warn(\"Server could not be found in serverList.\");\r",
											"    return {}\r",
											"}\r",
											"\r",
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"logger.struc(\"\\n===== WredProfileConfiguration ============================================================\");\r",
											"\r",
											"\r",
											"/****************************************************************************************\r",
											"* Loading Input Data\r",
											"****************************************************************************************/\r",
											"var collectionInfo = {};\r",
											"var serverInfo = {};\r",
											"var dummyServerInfo = {};\r",
											"var wredProfileUuid = \"\";\r",
											"try {\r",
											"    let collectionInputList;\r",
											"    collectionInputList = pm.environment.get(\"collectionInputList\");\r",
											"    collectionInfo = ExtractCollectionInput(collectionInputList, \"WredProfile\");\r",
											"\r",
											"    let serverToBeApplied;\r",
											"    serverToBeApplied = collectionInfo.serverToBeApplied;\r",
											"    let serverList;\r",
											"    serverList = pm.environment.get(\"serverList\");\r",
											"    serverInfo = ExtractServerInformation(serverList, serverToBeApplied);\r",
											"    dummyServerInfo = ExtractServerInformation(serverList, \"dummy\");\r",
											"\r",
											"    wredProfileUuid = pm.collectionVariables.get(\"wredProfileUuid\")\r",
											"\r",
											"} catch (error) {\r",
											"    logger.error(\"! Input data could not be loaded.\")\r",
											"}\r",
											"\r",
											"\r",
											"/****************************************************************************************\r",
											"* Processing\r",
											"****************************************************************************************/\r",
											"\r",
											"\r",
											"/****************************************************************************************\r",
											"* Setting Local Variables and Preparing the Request\r",
											"****************************************************************************************/\r",
											"try {\r",
											"    let filters;\r",
											"    filters = \"\";\r",
											"\r",
											"    let resourcePath;\r",
											"    let uuid = \"\";\r",
											"    resourcePath = \"/profile-collection/profile={uuid}/wred-profile-1-0:wred-profile-pac/wred-profile-configuration\";\r",
											"    uuid = wredProfileUuid;\r",
											"    resourcePath = FillUuidIntoPath(resourcePath, uuid);\r",
											"\r",
											"    let pathToControlConstruct;\r",
											"    pathToControlConstruct = serverInfo.pathToControlConstruct;\r",
											"    let mountName;\r",
											"    mountName = collectionInfo.mountName;\r",
											"    pathToControlConstruct = FillMountNameIntoPath(pathToControlConstruct, mountName);\r",
											"\r",
											"    let server;\r",
											"    server = serverInfo.server;\r",
											"\r",
											"    let uri;\r",
											"    if ( (mountName!=\"\") && (wredProfileUuid!=\"\") && (wredProfileUuid!=undefined) ) {\r",
											"        uri = server + pathToControlConstruct + resourcePath + filters\r",
											"    } else {\r",
											"        logger.warn(\"Input data incomplete.\");\r",
											"        uri = dummyServerInfo.dummyUri\r",
											"    }\r",
											"\r",
											"    let requestBody;\r",
											"    requestBody = '{}';\r",
											"\r",
											"\r",
											"    pm.variables.clear();\r",
											"\r",
											"    pm.variables.set(\"uri\", uri);\r",
											"    pm.variables.set(\"requestBody\", requestBody);\r",
											"    \r",
											"    pm.request.headers.upsert({ key: \"Authorization\", value: serverInfo.authorizationCode });\r",
											"    pm.request.headers.upsert({ key: \"operation-key\", value: serverInfo.operationKey });\r",
											"    pm.request.headers.upsert({ key: \"user\", value: serverInfo.userName });\r",
											"    pm.request.headers.upsert({ key: \"originator\", value: serverInfo.originator });\r",
											"    pm.request.headers.upsert({ key: \"x-correlator\", value: serverInfo.xCorrelator });\r",
											"    pm.request.headers.upsert({ key: \"trace-indicator\", value: serverInfo.traceIndicator });\r",
											"    pm.request.headers.upsert({ key: \"customer-journey\", value: serverInfo.customerJourney });\r",
											"\r",
											"    pm.request.headers.upsert({ key: \"Accept\", value: \"application/json\" });\r",
											"    pm.request.headers.upsert({ key: \"Content-Type\", value: \"application/json\" })\r",
											"\r",
											"} catch (error) {\r",
											"    logger.error(\"! Local variables could not be set.\")\r",
											"}\r",
											"\r",
											"\r",
											"/****************************************************************************************\r",
											"* Functions\r",
											"****************************************************************************************/\r",
											"function FillUuidIntoPath(path, uuid) {\r",
											"    if ( (uuid!=undefined) && (uuid!=null) && (uuid!=\"\") ) {\r",
											"      let subStringToBeReplaced = \"{uuid}\";\r",
											"      let indexOfStartOfSubStringToBeReplaced = path.lastIndexOf(subStringToBeReplaced);\r",
											"      let precedingSubString = path.slice(0, indexOfStartOfSubStringToBeReplaced);\r",
											"      let indexOfEndOfSubStringToBeReplaced = indexOfStartOfSubStringToBeReplaced + subStringToBeReplaced.length;\r",
											"      let subsequentSubString = path.slice(indexOfEndOfSubStringToBeReplaced);\r",
											"      path = precedingSubString + uuid + subsequentSubString;\r",
											"      return path\r",
											"    } else {\r",
											"      return path\r",
											"    }\r",
											"}\r",
											"\r",
											"function FillLocalIdIntoPath(path, localId) {\r",
											"    if ( (localId!=undefined) && (localId!=null) && (localId!=\"\") ) {\r",
											"      let subStringToBeReplaced = \"{localId}\";\r",
											"      let indexOfStartOfSubStringToBeReplaced = path.lastIndexOf(subStringToBeReplaced);\r",
											"      let precedingSubString = path.slice(0, indexOfStartOfSubStringToBeReplaced);\r",
											"      let indexOfEndOfSubStringToBeReplaced = indexOfStartOfSubStringToBeReplaced + subStringToBeReplaced.length;\r",
											"      let subsequentSubString = path.slice(indexOfEndOfSubStringToBeReplaced);\r",
											"      path = precedingSubString + localId + subsequentSubString;\r",
											"      return path\r",
											"    } else {\r",
											"      return path\r",
											"    }\r",
											"}\r",
											"\r",
											"function FillMountNameIntoPath(path, mountName) {\r",
											"  let subStringToBeReplaced = \"{mountName}\";\r",
											"  let indexOfStartOfSubStringToBeReplaced = path.lastIndexOf(subStringToBeReplaced);\r",
											"  let precedingSubString = path.slice(0, indexOfStartOfSubStringToBeReplaced);\r",
											"  let indexOfEndOfSubStringToBeReplaced = indexOfStartOfSubStringToBeReplaced + subStringToBeReplaced.length;\r",
											"  let subsequentSubString = path.slice(indexOfEndOfSubStringToBeReplaced);\r",
											"  path = precedingSubString + mountName + subsequentSubString;\r",
											"  return path\r",
											"}\r",
											"\r",
											"function ExtractServerInformation(serverList, searchedServerName) {\r",
											"    try {\r",
											"        for(let i=0; i<serverList.length; i++) {\r",
											"            if(serverList[i].serverName==searchedServerName) {\r",
											"                return serverList[i]\r",
											"            }\r",
											"        }\r",
											"    } catch (error) {\r",
											"        logger.error(\"! serverList not found or faulty\");\r",
											"        return {}\r",
											"    }\r",
											"    logger.warn(\"Server could not be found in serverList.\");\r",
											"    return {}\r",
											"}\r",
											"\r",
											"function ExtractCollectionInput(collectionInputList, searchedCollection) {\r",
											"    try {\r",
											"        for(let i=0; i<collectionInputList.length; i++) {\r",
											"            if(collectionInputList[i].collectionName==searchedCollection) {\r",
											"                return collectionInputList[i]\r",
											"            }\r",
											"        }\r",
											"    } catch (error) {\r",
											"        logger.error(\"! collectionInputList not found or faulty\");\r",
											"        return {}\r",
											"    }\r",
											"    logger.warn(\"Collection could not be found in collectionInputList.\");\r",
											"    return {}\r",
											"}\r",
											"\r",
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"auth": {
									"type": "noauth"
								},
								"method": "GET",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{{requestBody}}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{uri}}",
									"host": [
										"{{uri}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "create-wred-profile",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"logger.struc(\"\\n===== CreateWredProfile ===================================================================\");\r",
											"\r",
											"\r",
											"/****************************************************************************************\r",
											"* Loading Input Data\r",
											"****************************************************************************************/\r",
											"var collectionInfo = {};\r",
											"var serverInfo = {};\r",
											"var dummyServerInfo = {};\r",
											"var wredProfileIsAvail = false;\r",
											"var availableBufferSizeFromProfileCapabilities = -1;\r",
											"try {\r",
											"    let collectionInputList;\r",
											"    collectionInputList = pm.environment.get(\"collectionInputList\");\r",
											"    collectionInfo = ExtractCollectionInput(collectionInputList, \"WredProfileRpc\");\r",
											"\r",
											"    let serverToBeApplied;\r",
											"    serverToBeApplied = collectionInfo.serverToBeApplied;\r",
											"    let serverList;\r",
											"    serverList = pm.environment.get(\"serverList\");\r",
											"    serverInfo = ExtractServerInformation(serverList, serverToBeApplied);\r",
											"    dummyServerInfo = ExtractServerInformation(serverList, \"dummy\");\r",
											"\r",
											"    wredProfileIsAvail = pm.collectionVariables.get(\"wredProfileIsAvail\");\r",
											"\r",
											"    let wredProfileCapability;\r",
											"    wredProfileCapability = pm.collectionVariables.get(\"wredProfileCapability\");\r",
											"    availableBufferSizeFromProfileCapabilities = wredProfileCapability[\"available-buffer-size\"]\r",
											"\r",
											"} catch (error) {\r",
											"    logger.error(\"! Input data could not be loaded.\")\r",
											"}\r",
											"\r",
											"\r",
											"/****************************************************************************************\r",
											"* Processing\r",
											"****************************************************************************************/\r",
											"var creationInput = {};\r",
											"try {\r",
											"    switch ( collectionInfo.kindOfReference ) {\r",
											"        case \"dynamic\":\r",
											"            let availableBufferSize;\r",
											"            if ( availableBufferSizeFromProfileCapabilities != -1 ) {\r",
											"                availableBufferSize = availableBufferSizeFromProfileCapabilities\r",
											"            } else {\r",
											"                availableBufferSize = 256\r",
											"            }\r",
											"\r",
											"            let randomInteger;\r",
											"\r",
											"            randomInteger = Math.floor(Math.random() * 1000);\r",
											"            creationInput.externalLabel = \"test_\" + randomInteger.toString();\r",
											"\r",
											"            let thresholdLow;\r",
											"            randomInteger = Math.floor(Math.random() * 20) + 20;\r",
											"            thresholdLow = Math.floor(availableBufferSize * randomInteger / 100);\r",
											"            creationInput.thresholdLow = thresholdLow.toString();\r",
											"\r",
											"            randomInteger = Math.floor(Math.random() * 10) + 10;\r",
											"            creationInput.dropProbabilityAtThresholdLow = randomInteger.toString();\r",
											"\r",
											"            let thresholdHigh;\r",
											"            randomInteger = Math.floor(Math.random() * 20) + 70;\r",
											"            thresholdHigh = Math.floor(availableBufferSize * randomInteger / 100);\r",
											"            creationInput.thresholdHigh = thresholdHigh.toString();\r",
											"\r",
											"            randomInteger = Math.floor(Math.random() * 10) + 80;\r",
											"            creationInput.dropProbabilityAtThresholdHigh = randomInteger.toString();\r",
											"\r",
											"            randomInteger = Math.floor(Math.random());\r",
											"            if (randomInteger<0.5) {\r",
											"                creationInput.gentleWredIsOn = false\r",
											"            } else {\r",
											"                creationInput.gentleWredIsOn = true\r",
											"            };\r",
											"\r",
											"            let thresholdGentle;\r",
											"            randomInteger = Math.floor(Math.random() * 10) + 90;\r",
											"            thresholdGentle = Math.floor(availableBufferSize * randomInteger / 100);\r",
											"            creationInput.thresholdGentle = thresholdGentle.toString();\r",
											"\r",
											"            randomInteger = Math.floor(Math.random() * 16);\r",
											"            creationInput.sensitivity = randomInteger.toString();\r",
											"\r",
											"            randomInteger = Math.floor(Math.random());\r",
											"            if (randomInteger<0.5) {\r",
											"                creationInput.coloringIsOn = false\r",
											"            } else {\r",
											"                creationInput.coloringIsOn = true\r",
											"            };\r",
											"            break;\r",
											"\r",
											"        case \"static\":\r",
											"            creationInput.externalLabel = \"label_from_creation\";\r",
											"            creationInput.thresholdLow = \"200000\";\r",
											"            creationInput.dropProbabilityAtThresholdLow = \"10\";\r",
											"            creationInput.thresholdHigh = \"700000\";\r",
											"            creationInput.dropProbabilityAtThresholdHigh = \"80\";\r",
											"            creationInput.gentleWredIsOn = true\r",
											"            creationInput.thresholdGentle = \"900000\";\r",
											"            creationInput.sensitivity = \"4\";\r",
											"            creationInput.coloringIsOn = true\r",
											"            break;\r",
											"\r",
											"        default:\r",
											"            logger.warn(\"Kind of reference (static/dynamic) unknown.\")\r",
											"\r",
											"    }\r",
											"\r",
											"} catch (error) {\r",
											"    logger.error(\"! Random body could not be created.\")\r",
											"}\r",
											"\r",
											"\r",
											"/****************************************************************************************\r",
											"* Setting Collection Variables\r",
											"****************************************************************************************/\r",
											"try {\r",
											"    pm.collectionVariables.set(\"creationInput\", creationInput);\r",
											"\r",
											"} catch (error) {\r",
											"    logger.error(\"! collection variables could not be set.\")\r",
											"}\r",
											"\r",
											"\r",
											"/****************************************************************************************\r",
											"* Setting Local Variables and Preparing the Request\r",
											"****************************************************************************************/\r",
											"try {\r",
											"    let remoteProcedure;\r",
											"    remoteProcedure = \"/wred-profile-1-0:create-wred-profile\";\r",
											"    if(collectionInfo.suffixUrlEncodingIsRequired==true) remoteProcedure = UrlEncodeSuffix(remoteProcedure);\r",
											"\r",
											"    let pathToControlConstruct;\r",
											"    pathToControlConstruct = serverInfo.pathToControlConstruct;\r",
											"    let mountName;\r",
											"    mountName = collectionInfo.mountName;\r",
											"    pathToControlConstruct = FillMountNameIntoPath(pathToControlConstruct, mountName);\r",
											"\r",
											"    let server;\r",
											"    server = serverInfo.server;\r",
											"\r",
											"    let uri;\r",
											"    if ( (mountName!=\"\") && (wredProfileIsAvail==true) && (availableBufferSizeFromProfileCapabilities!=undefined) ) {\r",
											"        uri = server + pathToControlConstruct + remoteProcedure\r",
											"    } else {\r",
											"        logger.warn(\"Input data incomplete.\");\r",
											"        uri = dummyServerInfo.dummyUri\r",
											"    }\r",
											"\r",
											"    let requestBody;\r",
											"    requestBody = ''\r",
											"        +   '{ '\r",
											"        +       '\"input\": { '\r",
											"        +           '\"external-label\": \"' + creationInput.externalLabel + '\", '\r",
											"        +           '\"threshold-low\": \"' + creationInput.thresholdLow + '\", '\r",
											"        +           '\"drop-probability-at-threshold-low\": \"' + creationInput.dropProbabilityAtThresholdLow + '\", '\r",
											"        +           '\"threshold-high\": \"' + creationInput.thresholdHigh + '\", '\r",
											"        +           '\"drop-probability-at-threshold-high\": \"' + creationInput.dropProbabilityAtThresholdHigh + '\", '\r",
											"        +           '\"gentle-wred-is-on\": \"' + creationInput.gentleWredIsOn + '\", '\r",
											"        +           '\"threshold-gentle\": \"' + creationInput.thresholdGentle + '\", '\r",
											"        +           '\"sensitivity\": \"' + creationInput.sensitivity + '\", '\r",
											"        +           '\"coloring-is-on\": \"' + creationInput.coloringIsOn + '\" '\r",
											"        +       '} '\r",
											"        +   '}';\r",
											"\r",
											"\r",
											"    pm.variables.clear();\r",
											"\r",
											"    pm.variables.set(\"uri\", uri);\r",
											"    pm.variables.set(\"requestBody\", requestBody);\r",
											"    \r",
											"    pm.request.headers.upsert({ key: \"Authorization\", value: serverInfo.authorizationCode });\r",
											"    pm.request.headers.upsert({ key: \"operation-key\", value: serverInfo.operationKey });\r",
											"    pm.request.headers.upsert({ key: \"user\", value: serverInfo.userName });\r",
											"    pm.request.headers.upsert({ key: \"originator\", value: serverInfo.originator });\r",
											"    pm.request.headers.upsert({ key: \"x-correlator\", value: serverInfo.xCorrelator });\r",
											"    pm.request.headers.upsert({ key: \"trace-indicator\", value: serverInfo.traceIndicator });\r",
											"    pm.request.headers.upsert({ key: \"customer-journey\", value: serverInfo.customerJourney });\r",
											"\r",
											"    pm.request.headers.upsert({ key: \"Accept\", value: \"application/json\" });\r",
											"    pm.request.headers.upsert({ key: \"Content-Type\", value: \"application/json\" })\r",
											"\r",
											"} catch (error) {\r",
											"    logger.error(\"! Local variables could not be set.\")\r",
											"}\r",
											"\r",
											"\r",
											"/****************************************************************************************\r",
											"* Functions\r",
											"****************************************************************************************/\r",
											"function ReplaceSubstringByNewstringInInputstring(inputstring, substring, newstring) {\r",
											"    try {\r",
											"        let indexOfStartOfSubstring = inputstring.lastIndexOf(substring);\r",
											"        while ( indexOfStartOfSubstring != -1 ) {\r",
											"            let precedingSubString = inputstring.slice(0, indexOfStartOfSubstring);\r",
											"            let indexOfEndOfSubstring = indexOfStartOfSubstring + substring.length;\r",
											"            let subsequentSubString = inputstring.slice(indexOfEndOfSubstring);\r",
											"            inputstring = precedingSubString + newstring + subsequentSubString;\r",
											"\r",
											"            indexOfStartOfSubstring = inputstring.lastIndexOf(substring)\r",
											"        }\r",
											"    } catch (error) {\r",
											"        inputstring = \"-1\";\r",
											"        logger.error(\"! Substring could not be replaced by Newstring\")\r",
											"    }\r",
											"    return inputstring\r",
											"}\r",
											"\r",
											"function UrlEncodeString(text) {\r",
											"    text = ReplaceSubstringByNewstringInInputstring(text, \"(\", \"%28\");\r",
											"    text = ReplaceSubstringByNewstringInInputstring(text, \")\", \"%29\");\r",
											"    text = ReplaceSubstringByNewstringInInputstring(text, \":\", \"%3A\");\r",
											"    text = ReplaceSubstringByNewstringInInputstring(text, \";\", \"%3B\");\r",
											"    return text\r",
											"}\r",
											"\r",
											"function UrlEncodeSuffix(remoteProcedure) {\r",
											"    var remoteProcedureWithUrlEncodedSuffix;\r",
											"    try {\r",
											"        let indexOfLastSlash = remoteProcedure.lastIndexOf(\"/\");\r",
											"        let suffix = remoteProcedure.slice(indexOfLastSlash);\r",
											"        let urlEncodedSuffix = UrlEncodeString(suffix);\r",
											"        if (urlEncodedSuffix==\"-1\") throw \"encoding failed\";\r",
											"        let trunkPath = remoteProcedure.slice(0, indexOfLastSlash);\r",
											"        remoteProcedureWithUrlEncodedSuffix = trunkPath + urlEncodedSuffix\r",
											"    } catch (error) {\r",
											"        remoteProcedureWithUrlEncodedSuffix = \"\";\r",
											"        logger.error(\"! Suffix of remote procedure could not be encoded\")\r",
											"    }\r",
											"    return remoteProcedureWithUrlEncodedSuffix\r",
											"}\r",
											"\r",
											"function FillUuidIntoPath(path, uuid) {\r",
											"    if ( (uuid!=undefined) && (uuid!=null) && (uuid!=\"\") ) {\r",
											"      let subStringToBeReplaced = \"{uuid}\";\r",
											"      let indexOfStartOfSubStringToBeReplaced = path.lastIndexOf(subStringToBeReplaced);\r",
											"      let precedingSubString = path.slice(0, indexOfStartOfSubStringToBeReplaced);\r",
											"      let indexOfEndOfSubStringToBeReplaced = indexOfStartOfSubStringToBeReplaced + subStringToBeReplaced.length;\r",
											"      let subsequentSubString = path.slice(indexOfEndOfSubStringToBeReplaced);\r",
											"      path = precedingSubString + uuid + subsequentSubString;\r",
											"      return path\r",
											"    } else {\r",
											"      return path\r",
											"    }\r",
											"}\r",
											"\r",
											"function FillLocalIdIntoPath(path, localId) {\r",
											"    if ( (localId!=undefined) && (localId!=null) && (localId!=\"\") ) {\r",
											"      let subStringToBeReplaced = \"{localId}\";\r",
											"      let indexOfStartOfSubStringToBeReplaced = path.lastIndexOf(subStringToBeReplaced);\r",
											"      let precedingSubString = path.slice(0, indexOfStartOfSubStringToBeReplaced);\r",
											"      let indexOfEndOfSubStringToBeReplaced = indexOfStartOfSubStringToBeReplaced + subStringToBeReplaced.length;\r",
											"      let subsequentSubString = path.slice(indexOfEndOfSubStringToBeReplaced);\r",
											"      path = precedingSubString + localId + subsequentSubString;\r",
											"      return path\r",
											"    } else {\r",
											"      return path\r",
											"    }\r",
											"}\r",
											"\r",
											"function FillMountNameIntoPath(path, mountName) {\r",
											"  let subStringToBeReplaced = \"{mountName}\";\r",
											"  let indexOfStartOfSubStringToBeReplaced = path.lastIndexOf(subStringToBeReplaced);\r",
											"  let precedingSubString = path.slice(0, indexOfStartOfSubStringToBeReplaced);\r",
											"  let indexOfEndOfSubStringToBeReplaced = indexOfStartOfSubStringToBeReplaced + subStringToBeReplaced.length;\r",
											"  let subsequentSubString = path.slice(indexOfEndOfSubStringToBeReplaced);\r",
											"  path = precedingSubString + mountName + subsequentSubString;\r",
											"  return path\r",
											"}\r",
											"\r",
											"function ExtractServerInformation(serverList, searchedServerName) {\r",
											"    try {\r",
											"        for(let i=0; i<serverList.length; i++) {\r",
											"            if(serverList[i].serverName==searchedServerName) {\r",
											"                return serverList[i]\r",
											"            }\r",
											"        }\r",
											"    } catch (error) {\r",
											"        logger.error(\"! serverList not found or faulty\");\r",
											"        return {}\r",
											"    }\r",
											"    logger.warn(\"Server could not be found in serverList.\");\r",
											"    return {}\r",
											"}\r",
											"\r",
											"function ExtractCollectionInput(collectionInputList, searchedCollection) {\r",
											"    try {\r",
											"        for(let i=0; i<collectionInputList.length; i++) {\r",
											"            if(collectionInputList[i].collectionName==searchedCollection) {\r",
											"                return collectionInputList[i]\r",
											"            }\r",
											"        }\r",
											"    } catch (error) {\r",
											"        logger.error(\"! collectionInputList not found or faulty\");\r",
											"        return {}\r",
											"    }\r",
											"    logger.warn(\"Collection could not be found in collectionInputList.\");\r",
											"    return {}\r",
											"}\r",
											"\r",
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								},
								{
									"listen": "test",
									"script": {
										"exec": [
											"/****************************************************************************************\r",
											"* Loading Input Data\r",
											"****************************************************************************************/\r",
											"var uri;\r",
											"var dummyUri;\r",
											"try {\r",
											"    uri = pm.variables.get(\"uri\");\r",
											"\r",
											"    let serverList;\r",
											"    serverList = pm.environment.get(\"serverList\");\r",
											"    let dummyServerInfo;\r",
											"    dummyServerInfo = ExtractServerInformation(serverList, \"dummy\");\r",
											"    dummyUri = dummyServerInfo.dummyUri\r",
											"\r",
											"} catch (error) {\r",
											"    logger.error(\"! Input data could not be loaded.\")\r",
											"}\r",
											"\r",
											"\r",
											"/****************************************************************************************\r",
											"* Extracting Result\r",
											"****************************************************************************************/\r",
											"var responseCode;\r",
											"var responseObject = {};\r",
											"var createdWredProfileUuid = \"\";\r",
											"try {\r",
											"    if ( uri != dummyUri ) {\r",
											"        let response;\r",
											"        response = pm.response;\r",
											"\r",
											"        responseCode = parseInt(response.code);\r",
											"\r",
											"        if ( Math.floor(responseCode/100) === 2 ) {\r",
											"            responseObject = JSON.parse(response.stream);\r",
											"\r",
											"            createdWredProfileUuid = responseObject[\"wred-profile-1-0:output\"][\"created-wred-profile\"]\r",
											"\r",
											"        }\r",
											"\r",
											"    }\r",
											"\r",
											"} catch (error) {\r",
											"    logger.error(\"! result could not be extracted.\")\r",
											"}\r",
											"\r",
											"\r",
											"/****************************************************************************************\r",
											"* Processing\r",
											"****************************************************************************************/\r",
											"var reference;\r",
											"try {\r",
											"    reference = {\r",
											"        \"type\": \"object\",\r",
											"        \"required\": [\r",
											"            \"wred-profile-1-0:output\"\r",
											"        ],\r",
											"        \"properties\": {\r",
											"            \"wred-profile-1-0:output\": {\r",
											"                \"type\": \"object\",\r",
											"                \"required\": [\r",
											"                    \"created-wred-profile\"\r",
											"                ],\r",
											"                \"properties\": {\r",
											"                    \"created-wred-profile\": {\r",
											"                        \"type\": \"string\"\r",
											"                    }\r",
											"                }\r",
											"            }\r",
											"        }\r",
											"    }\r",
											"\r",
											"} catch (error) {\r",
											"    logger.error(\"! reference could not be defined.\")\r",
											"}\r",
											"\r",
											"try {\r",
											"    if ( uri != dummyUri ) {\r",
											"        logger.log(\"Analysis:\");\r",
											"\r",
											"        pm.test(\"CreateWredProfile RPC responded 200\", function () {\r",
											"            pm.expect(responseCode).to.equal(200)\r",
											"        });\r",
											"        if ( responseCode == 200 ) {\r",
											"            logger.log(\"  - ok: CreateWredProfile RPC responded 200\")\r",
											"        } else {\r",
											"            logger.log(\"  - FAIL: ResponseCode of CreateWredProfile RPC responded \" + responseCode + \" instead of 200\")\r",
											"        }\r",
											"\r",
											"        if ( Object.keys(responseObject).length != 0 ) {\r",
											"            logger.log(\"Reference Schema:\");\r",
											"            logger.log(reference);\r",
											"\r",
											"            logger.log(\"Interface Response:\");\r",
											"            logger.log(responseObject);\r",
											"\r",
											"            let validationResult;\r",
											"            validationResult = tv4.validateMultiple(responseObject, reference, true, true);\r",
											"            logger.log(\"Validation Result:\");\r",
											"            logger.log(validationResult);\r",
											"\r",
											"            pm.test(\"Response matches schema definition\", function () {\r",
											"                pm.expect(validationResult.errors.length).to.equal(0)\r",
											"            });\r",
											"            if (validationResult.errors.length==0) {\r",
											"                logger.log(\"  - ok: Response matches schema definition\")\r",
											"            } else {\r",
											"                logger.log(\"  - FAIL: Response matches schema definition\")\r",
											"            }\r",
											"\r",
											"        }\r",
											"\r",
											"    }\r",
											"\r",
											"} catch (error) {\r",
											"    logger.error(\"! validation could not be completely executed.\")\r",
											"}\r",
											"\r",
											"\r",
											"/****************************************************************************************\r",
											"* Setting Collection Variables\r",
											"****************************************************************************************/\r",
											"try {\r",
											"    pm.collectionVariables.set(\"createdWredProfileUuid\", createdWredProfileUuid);\r",
											"\r",
											"} catch (error) {\r",
											"    logger.error(\"! collection variables could not be set.\")\r",
											"}\r",
											"\r",
											"\r",
											"/****************************************************************************************\r",
											"* Functions\r",
											"****************************************************************************************/\r",
											"function ExtractServerInformation(serverList, searchedServerName) {\r",
											"    try {\r",
											"        for(let i=0; i<serverList.length; i++) {\r",
											"            if(serverList[i].serverName==searchedServerName) {\r",
											"                return serverList[i]\r",
											"            }\r",
											"        }\r",
											"    } catch (error) {\r",
											"        logger.error(\"! serverList not found or faulty\");\r",
											"        return {}\r",
											"    }\r",
											"    logger.warn(\"Server could not be found in serverList.\");\r",
											"    return {}\r",
											"}\r",
											"\r",
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"auth": {
									"type": "noauth"
								},
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{{requestBody}}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{uri}}",
									"host": [
										"{{uri}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "wred-profile-configuration",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"/****************************************************************************************\r",
											"* Loading Input Data\r",
											"****************************************************************************************/\r",
											"var uri;\r",
											"var dummyUri;\r",
											"var availableBufferSize = -1;\r",
											"var dropProbabilityAtThresholdLowIsAvail = false;\r",
											"var gentleWredIsAvail = false;\r",
											"var sensitivitySettingIsAvail = false;\r",
											"var coloringIsAvail = false;\r",
											"var sentExternalLabel = \"\";\r",
											"var sentThresholdLow = -1;\r",
											"var sentDropProbabilityAtThresholdLow = -1;\r",
											"var sentThresholdHigh = -1;\r",
											"var sentDropProbabilityAtThresholdHigh = -1;\r",
											"var sentGentleWredIsOn = false;\r",
											"var sentThresholdGentle = -1;\r",
											"var sentSensitivity = -1;\r",
											"var sentColoringIsOn = false;\r",
											"try {\r",
											"    uri = pm.variables.get(\"uri\");\r",
											"\r",
											"    let serverList;\r",
											"    serverList = pm.environment.get(\"serverList\");\r",
											"    let dummyServerInfo;\r",
											"    dummyServerInfo = ExtractServerInformation(serverList, \"dummy\");\r",
											"    dummyUri = dummyServerInfo.dummyUri;\r",
											"\r",
											"    let wredProfileCapability = {};\r",
											"    wredProfileCapability = pm.collectionVariables.get(\"wredProfileCapability\");\r",
											"    availableBufferSize = wredProfileCapability[\"available-buffer-size\"];\r",
											"    dropProbabilityAtThresholdLowIsAvail = wredProfileCapability[\"drop-probability-at-threshold-low-is-avail\"];\r",
											"    gentleWredIsAvail = wredProfileCapability[\"gentle-wred-is-avail\"];\r",
											"    sensitivitySettingIsAvail = wredProfileCapability[\"sensitivity-setting-is-avail\"];\r",
											"    coloringIsAvail = wredProfileCapability[\"coloring-is-avail\"];\r",
											"\r",
											"    let creationInput;\r",
											"    creationInput = pm.collectionVariables.get(\"creationInput\");\r",
											"    sentExternalLabel = creationInput.externalLabel;\r",
											"    sentThresholdLow = parseInt(creationInput.thresholdLow);\r",
											"    sentDropProbabilityAtThresholdLow = parseInt(creationInput.dropProbabilityAtThresholdLow);\r",
											"    sentThresholdHigh = parseInt(creationInput.thresholdHigh);\r",
											"    sentDropProbabilityAtThresholdHigh = parseInt(creationInput.dropProbabilityAtThresholdHigh);\r",
											"    sentGentleWredIsOn = creationInput.gentleWredIsOn;\r",
											"    sentThresholdGentle = parseInt(creationInput.thresholdGentle);\r",
											"    sentSensitivity = parseInt(creationInput.sensitivity);\r",
											"    sentColoringIsOn = creationInput.coloringIsOn;\r",
											"\r",
											"} catch (error) {\r",
											"    logger.error(\"! Input data could not be loaded.\")\r",
											"}\r",
											"\r",
											"\r",
											"/****************************************************************************************\r",
											"* Extracting Result\r",
											"****************************************************************************************/\r",
											"var responseCode;\r",
											"var responseObject = {};\r",
											"var storedExternalLabel = \"\";\r",
											"var storedThresholdLow = 0;\r",
											"var storedDropProbabilityAtThresholdLow = 0;\r",
											"var storedThresholdHigh = 0;\r",
											"var storedDropProbabilityAtThresholdHigh = 0;\r",
											"var storedGentleWredIsOn = true;\r",
											"var storedThresholdGentle = 0;\r",
											"var storedSensitivity = 0;\r",
											"var storedColoringIsOn = true;\r",
											"try {\r",
											"    if ( uri != dummyUri ) {\r",
											"        let response;\r",
											"        response = pm.response;\r",
											"\r",
											"        responseCode = parseInt(response.code);\r",
											"\r",
											"        if ( Math.floor(responseCode/100) === 2 ) {\r",
											"            responseObject = JSON.parse(response.stream);\r",
											"\r",
											"            let wredProfileConfiguration;\r",
											"            wredProfileConfiguration = responseObject[\"wred-profile-1-0:wred-profile-configuration\"];\r",
											"            storedExternalLabel = wredProfileConfiguration[\"external-label\"];\r",
											"            storedThresholdLow = wredProfileConfiguration[\"threshold-low\"];\r",
											"            storedDropProbabilityAtThresholdLow = wredProfileConfiguration[\"drop-probability-at-threshold-low\"];\r",
											"            storedThresholdHigh = wredProfileConfiguration[\"threshold-high\"];\r",
											"            storedDropProbabilityAtThresholdHigh = wredProfileConfiguration[\"drop-probability-at-threshold-high\"];\r",
											"            storedGentleWredIsOn = wredProfileConfiguration[\"gentle-wred-is-on\"];\r",
											"            storedThresholdGentle = wredProfileConfiguration[\"threshold-gentle\"];\r",
											"            storedSensitivity = wredProfileConfiguration[\"sensitivity\"];\r",
											"            storedColoringIsOn = wredProfileConfiguration[\"coloring-is-on\"];\r",
											"\r",
											"        }\r",
											"\r",
											"    }\r",
											"\r",
											"} catch (error) {\r",
											"    logger.error(\"! result could not be extracted.\")\r",
											"}\r",
											"\r",
											"\r",
											"/****************************************************************************************\r",
											"* Processing\r",
											"****************************************************************************************/\r",
											"try {\r",
											"    if ( uri != dummyUri ) {\r",
											"        logger.log(\"Analysis:\");\r",
											"\r",
											"        pm.test(\"WredProfileConfiguration could be loaded\", function () {\r",
											"            pm.expect(responseCode).to.equal(200)\r",
											"        });\r",
											"        if ( responseCode == 200 ) {\r",
											"            logger.log(\"  - ok: WredProfileConfiguration could be loaded\")\r",
											"        } else {\r",
											"            logger.log(\"  - FAIL: WredProfileConfiguration could not be loaded \" + responseCode + \" instead of 200\")\r",
											"        }\r",
											"\r",
											"        if ( Object.keys(responseObject).length != 0 ) {\r",
											"\r",
											"            let expectedExternalLabel;\r",
											"            expectedExternalLabel = sentExternalLabel;\r",
											"\r",
											"            let expectedThresholdLow;\r",
											"            if ( availableBufferSize == -1 ) {\r",
											"                expectedThresholdLow = -1\r",
											"            } else {\r",
											"                expectedThresholdLow = sentThresholdLow\r",
											"            };\r",
											"\r",
											"            let expectedDropProbabilityAtThresholdLow;\r",
											"            if ( dropProbabilityAtThresholdLowIsAvail == false ) {\r",
											"                expectedDropProbabilityAtThresholdLow = -1\r",
											"            } else {\r",
											"                expectedDropProbabilityAtThresholdLow = sentDropProbabilityAtThresholdLow\r",
											"            };\r",
											"\r",
											"            let expectedThresholdHigh;\r",
											"            if ( availableBufferSize == -1 ) {\r",
											"                expectedThresholdHigh = -1\r",
											"            } else {\r",
											"                expectedThresholdHigh = sentThresholdHigh\r",
											"            };\r",
											"\r",
											"            let expectedDropProbabilityAtThresholdHigh;\r",
											"            expectedDropProbabilityAtThresholdHigh = sentDropProbabilityAtThresholdHigh;\r",
											"\r",
											"            let expectedGentleWredIsOn;\r",
											"            if ( gentleWredIsAvail == false ) {\r",
											"                expectedGentleWredIsOn = false\r",
											"            } else {\r",
											"                expectedGentleWredIsOn = sentGentleWredIsOn\r",
											"            };\r",
											"\r",
											"            let expectedThresholdGentle;\r",
											"            if ( (gentleWredIsAvail==false) || (availableBufferSize==-1) ) {\r",
											"                expectedThresholdGentle = -1\r",
											"            } else {\r",
											"                expectedThresholdGentle = sentThresholdGentle\r",
											"            };\r",
											"\r",
											"            let expectedSensitivity;\r",
											"            if ( sensitivitySettingIsAvail == false ) {\r",
											"                expectedSensitivity = -1\r",
											"            } else {\r",
											"                expectedSensitivity = sentSensitivity\r",
											"            };\r",
											"\r",
											"            let expectedColoringIsOn;\r",
											"            if ( coloringIsAvail == false ) {\r",
											"                expectedColoringIsOn = false\r",
											"            } else {\r",
											"                expectedColoringIsOn = sentColoringIsOn\r",
											"            };\r",
											"\r",
											"            logger.log(\"  - externalLabel\");\r",
											"            logger.log(\"    - expected: \" + expectedExternalLabel);\r",
											"            logger.log(\"    - stored: \" + storedExternalLabel);\r",
											"\r",
											"            logger.log(\"  - thresholdLow (availableBufferSize=\" + availableBufferSize + \")\");\r",
											"            logger.log(\"    - expected: \" + expectedThresholdLow);\r",
											"            logger.log(\"    - stored: \" + storedThresholdLow);\r",
											"\r",
											"            logger.log(\"  - dropProbabilityAtThresholdLow (dropProbabilityAtThresholdLowIsAvail=\" + dropProbabilityAtThresholdLowIsAvail + \")\");\r",
											"            logger.log(\"    - expected: \" + expectedDropProbabilityAtThresholdLow);\r",
											"            logger.log(\"    - stored: \" + storedDropProbabilityAtThresholdLow);\r",
											"\r",
											"            logger.log(\"  - thresholdHigh (availableBufferSize=\" + availableBufferSize + \")\");\r",
											"            logger.log(\"    - expected: \" + expectedThresholdHigh);\r",
											"            logger.log(\"    - stored: \" + storedThresholdHigh);\r",
											"\r",
											"            logger.log(\"  - dropProbabilityAtThresholdHigh\");\r",
											"            logger.log(\"    - expected: \" + expectedDropProbabilityAtThresholdHigh);\r",
											"            logger.log(\"    - stored: \" + storedDropProbabilityAtThresholdHigh);\r",
											"\r",
											"            logger.log(\"  - gentleWredIsOn (gentleWredIsAvail=\" + gentleWredIsAvail + \")\");\r",
											"            logger.log(\"    - expected: \" + expectedGentleWredIsOn);\r",
											"            logger.log(\"    - stored: \" + storedGentleWredIsOn);\r",
											"\r",
											"            logger.log(\"  - thresholdGentle (gentleWredIsAvail=\" + gentleWredIsAvail + \")\");\r",
											"            logger.log(\"    - expected: \" + expectedThresholdGentle);\r",
											"            logger.log(\"    - stored: \" + storedThresholdGentle);\r",
											"\r",
											"            logger.log(\"  - sensitivity (sensitivitySettingIsAvail=\" + sensitivitySettingIsAvail + \")\");\r",
											"            logger.log(\"    - expected: \" + expectedSensitivity);\r",
											"            logger.log(\"    - stored: \" + storedSensitivity);\r",
											"\r",
											"            logger.log(\"  - coloringIsOn (coloringIsAvail=\" + coloringIsAvail + \")\");\r",
											"            logger.log(\"    - expected: \" + expectedColoringIsOn);\r",
											"            logger.log(\"    - stored: \" + storedColoringIsOn);\r",
											"\r",
											"            pm.test(\"Stored data matches input of CreateWredProfile RPC\", function () {\r",
											"                pm.expect(storedExternalLabel).to.equal(expectedExternalLabel);\r",
											"                pm.expect(storedThresholdLow).to.equal(expectedThresholdLow);\r",
											"                pm.expect(storedDropProbabilityAtThresholdLow).to.equal(expectedDropProbabilityAtThresholdLow);\r",
											"                pm.expect(storedThresholdHigh).to.equal(expectedThresholdHigh);\r",
											"                pm.expect(storedDropProbabilityAtThresholdHigh).to.equal(expectedDropProbabilityAtThresholdHigh);\r",
											"                pm.expect(storedGentleWredIsOn).to.equal(expectedGentleWredIsOn);\r",
											"                pm.expect(storedThresholdGentle).to.equal(expectedThresholdGentle);\r",
											"                pm.expect(storedSensitivity).to.equal(expectedSensitivity);\r",
											"                pm.expect(storedColoringIsOn).to.equal(expectedColoringIsOn)\r",
											"            });\r",
											"            if ( (storedExternalLabel==expectedExternalLabel)\r",
											"                    && (storedThresholdLow==expectedThresholdLow)\r",
											"                    && (storedDropProbabilityAtThresholdLow==expectedDropProbabilityAtThresholdLow)\r",
											"                    && (storedThresholdHigh==expectedThresholdHigh)\r",
											"                    && (storedDropProbabilityAtThresholdHigh==expectedDropProbabilityAtThresholdHigh)\r",
											"                    && (storedGentleWredIsOn==expectedGentleWredIsOn)\r",
											"                    && (storedThresholdGentle==expectedThresholdGentle)\r",
											"                    && (storedSensitivity==expectedSensitivity)\r",
											"                    && (storedColoringIsOn==expectedColoringIsOn) ) {\r",
											"                logger.log(\"  - ok: Stored data matches input of CreateWredProfile RPC\")\r",
											"            } else {\r",
											"                logger.log(\"  - FAIL: Stored data does not match input of CreateWredProfile RPC\")\r",
											"            }\r",
											"\r",
											"        }\r",
											"\r",
											"    }\r",
											"\r",
											"} catch (error) {\r",
											"    logger.error(\"! validation could not be completely executed.\")\r",
											"}\r",
											"\r",
											"\r",
											"/****************************************************************************************\r",
											"* Setting Collection Variables\r",
											"****************************************************************************************/\r",
											"\r",
											"\r",
											"/****************************************************************************************\r",
											"* Functions\r",
											"****************************************************************************************/\r",
											"function ExtractServerInformation(serverList, searchedServerName) {\r",
											"    try {\r",
											"        for(let i=0; i<serverList.length; i++) {\r",
											"            if(serverList[i].serverName==searchedServerName) {\r",
											"                return serverList[i]\r",
											"            }\r",
											"        }\r",
											"    } catch (error) {\r",
											"        logger.error(\"! serverList not found or faulty\");\r",
											"        return {}\r",
											"    }\r",
											"    logger.warn(\"Server could not be found in serverList.\");\r",
											"    return {}\r",
											"}\r",
											"\r",
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"logger.struc(\"\\n===== WredProfileConfiguration ============================================================\");\r",
											"\r",
											"\r",
											"/****************************************************************************************\r",
											"* Loading Input Data\r",
											"****************************************************************************************/\r",
											"var collectionInfo = {};\r",
											"var serverInfo = {};\r",
											"var dummyServerInfo = {};\r",
											"var createdWredProfileUuid = \"\";\r",
											"try {\r",
											"    let collectionInputList;\r",
											"    collectionInputList = pm.environment.get(\"collectionInputList\");\r",
											"    collectionInfo = ExtractCollectionInput(collectionInputList, \"WredProfile\");\r",
											"\r",
											"    let serverToBeApplied;\r",
											"    serverToBeApplied = collectionInfo.serverToBeApplied;\r",
											"    let serverList;\r",
											"    serverList = pm.environment.get(\"serverList\");\r",
											"    serverInfo = ExtractServerInformation(serverList, serverToBeApplied);\r",
											"    dummyServerInfo = ExtractServerInformation(serverList, \"dummy\");\r",
											"\r",
											"    createdWredProfileUuid = pm.collectionVariables.get(\"createdWredProfileUuid\")\r",
											"\r",
											"} catch (error) {\r",
											"    logger.error(\"! Input data could not be loaded.\")\r",
											"}\r",
											"\r",
											"\r",
											"/****************************************************************************************\r",
											"* Processing\r",
											"****************************************************************************************/\r",
											"\r",
											"\r",
											"/****************************************************************************************\r",
											"* Setting Local Variables and Preparing the Request\r",
											"****************************************************************************************/\r",
											"try {\r",
											"    let filters;\r",
											"    filters = \"\";\r",
											"\r",
											"    let resourcePath;\r",
											"    let uuid = \"\";\r",
											"    resourcePath = \"/profile-collection/profile={uuid}/wred-profile-1-0:wred-profile-pac/wred-profile-configuration\";\r",
											"    if ( (createdWredProfileUuid!=\"\") && (createdWredProfileUuid!=undefined) ) {\r",
											"        switch ( collectionInfo.kindOfReference ) {\r",
											"            case \"dynamic\":\r",
											"                uuid = createdWredProfileUuid;\r",
											"                break;\r",
											"\r",
											"            case \"static\":\r",
											"                uuid = createdWredProfileUuid + \"a\";\r",
											"                break;\r",
											"\r",
											"            default:\r",
											"                logger.warn(\"Kind of reference (static/dynamic) unknown.\");\r",
											"                uuid = createdWredProfileUuid\r",
											"\r",
											"        }\r",
											"    }\r",
											"    resourcePath = FillUuidIntoPath(resourcePath, uuid);\r",
											"\r",
											"    let pathToControlConstruct;\r",
											"    pathToControlConstruct = serverInfo.pathToControlConstruct;\r",
											"    let mountName;\r",
											"    mountName = collectionInfo.mountName;\r",
											"    pathToControlConstruct = FillMountNameIntoPath(pathToControlConstruct, mountName);\r",
											"\r",
											"    let server;\r",
											"    server = serverInfo.server;\r",
											"\r",
											"    let uri;\r",
											"    if ( (mountName!=\"\") && (createdWredProfileUuid!=\"\") && (createdWredProfileUuid!=undefined) ) {\r",
											"        uri = server + pathToControlConstruct + resourcePath + filters\r",
											"    } else {\r",
											"        logger.warn(\"Input data incomplete.\");\r",
											"        uri = dummyServerInfo.dummyUri\r",
											"    }\r",
											"\r",
											"    let requestBody;\r",
											"    requestBody = '{}';\r",
											"\r",
											"\r",
											"    pm.variables.clear();\r",
											"\r",
											"    pm.variables.set(\"uri\", uri);\r",
											"    pm.variables.set(\"requestBody\", requestBody);\r",
											"    \r",
											"    pm.request.headers.upsert({ key: \"Authorization\", value: serverInfo.authorizationCode });\r",
											"    pm.request.headers.upsert({ key: \"operation-key\", value: serverInfo.operationKey });\r",
											"    pm.request.headers.upsert({ key: \"user\", value: serverInfo.userName });\r",
											"    pm.request.headers.upsert({ key: \"originator\", value: serverInfo.originator });\r",
											"    pm.request.headers.upsert({ key: \"x-correlator\", value: serverInfo.xCorrelator });\r",
											"    pm.request.headers.upsert({ key: \"trace-indicator\", value: serverInfo.traceIndicator });\r",
											"    pm.request.headers.upsert({ key: \"customer-journey\", value: serverInfo.customerJourney });\r",
											"\r",
											"    pm.request.headers.upsert({ key: \"Accept\", value: \"application/json\" });\r",
											"    pm.request.headers.upsert({ key: \"Content-Type\", value: \"application/json\" })\r",
											"\r",
											"} catch (error) {\r",
											"    logger.error(\"! Local variables could not be set.\")\r",
											"}\r",
											"\r",
											"\r",
											"/****************************************************************************************\r",
											"* Functions\r",
											"****************************************************************************************/\r",
											"function FillUuidIntoPath(path, uuid) {\r",
											"    if ( (uuid!=undefined) && (uuid!=null) && (uuid!=\"\") ) {\r",
											"      let subStringToBeReplaced = \"{uuid}\";\r",
											"      let indexOfStartOfSubStringToBeReplaced = path.lastIndexOf(subStringToBeReplaced);\r",
											"      let precedingSubString = path.slice(0, indexOfStartOfSubStringToBeReplaced);\r",
											"      let indexOfEndOfSubStringToBeReplaced = indexOfStartOfSubStringToBeReplaced + subStringToBeReplaced.length;\r",
											"      let subsequentSubString = path.slice(indexOfEndOfSubStringToBeReplaced);\r",
											"      path = precedingSubString + uuid + subsequentSubString;\r",
											"      return path\r",
											"    } else {\r",
											"      return path\r",
											"    }\r",
											"}\r",
											"\r",
											"function FillLocalIdIntoPath(path, localId) {\r",
											"    if ( (localId!=undefined) && (localId!=null) && (localId!=\"\") ) {\r",
											"      let subStringToBeReplaced = \"{localId}\";\r",
											"      let indexOfStartOfSubStringToBeReplaced = path.lastIndexOf(subStringToBeReplaced);\r",
											"      let precedingSubString = path.slice(0, indexOfStartOfSubStringToBeReplaced);\r",
											"      let indexOfEndOfSubStringToBeReplaced = indexOfStartOfSubStringToBeReplaced + subStringToBeReplaced.length;\r",
											"      let subsequentSubString = path.slice(indexOfEndOfSubStringToBeReplaced);\r",
											"      path = precedingSubString + localId + subsequentSubString;\r",
											"      return path\r",
											"    } else {\r",
											"      return path\r",
											"    }\r",
											"}\r",
											"\r",
											"function FillMountNameIntoPath(path, mountName) {\r",
											"  let subStringToBeReplaced = \"{mountName}\";\r",
											"  let indexOfStartOfSubStringToBeReplaced = path.lastIndexOf(subStringToBeReplaced);\r",
											"  let precedingSubString = path.slice(0, indexOfStartOfSubStringToBeReplaced);\r",
											"  let indexOfEndOfSubStringToBeReplaced = indexOfStartOfSubStringToBeReplaced + subStringToBeReplaced.length;\r",
											"  let subsequentSubString = path.slice(indexOfEndOfSubStringToBeReplaced);\r",
											"  path = precedingSubString + mountName + subsequentSubString;\r",
											"  return path\r",
											"}\r",
											"\r",
											"function ExtractServerInformation(serverList, searchedServerName) {\r",
											"    try {\r",
											"        for(let i=0; i<serverList.length; i++) {\r",
											"            if(serverList[i].serverName==searchedServerName) {\r",
											"                return serverList[i]\r",
											"            }\r",
											"        }\r",
											"    } catch (error) {\r",
											"        logger.error(\"! serverList not found or faulty\");\r",
											"        return {}\r",
											"    }\r",
											"    logger.warn(\"Server could not be found in serverList.\");\r",
											"    return {}\r",
											"}\r",
											"\r",
											"function ExtractCollectionInput(collectionInputList, searchedCollection) {\r",
											"    try {\r",
											"        for(let i=0; i<collectionInputList.length; i++) {\r",
											"            if(collectionInputList[i].collectionName==searchedCollection) {\r",
											"                return collectionInputList[i]\r",
											"            }\r",
											"        }\r",
											"    } catch (error) {\r",
											"        logger.error(\"! collectionInputList not found or faulty\");\r",
											"        return {}\r",
											"    }\r",
											"    logger.warn(\"Collection could not be found in collectionInputList.\");\r",
											"    return {}\r",
											"}\r",
											"\r",
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"auth": {
									"type": "noauth"
								},
								"method": "GET",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{{requestBody}}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{uri}}",
									"host": [
										"{{uri}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "modify-wred-profile",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"/****************************************************************************************\r",
											"* Loading Input Data\r",
											"****************************************************************************************/\r",
											"var uri;\r",
											"var dummyUri;\r",
											"try {\r",
											"    uri = pm.variables.get(\"uri\");\r",
											"\r",
											"    let serverList;\r",
											"    serverList = pm.environment.get(\"serverList\");\r",
											"    let dummyServerInfo;\r",
											"    dummyServerInfo = ExtractServerInformation(serverList, \"dummy\");\r",
											"    dummyUri = dummyServerInfo.dummyUri\r",
											"\r",
											"} catch (error) {\r",
											"    logger.error(\"! Input data could not be loaded.\")\r",
											"}\r",
											"\r",
											"\r",
											"/****************************************************************************************\r",
											"* Extracting Result\r",
											"****************************************************************************************/\r",
											"var responseCode;\r",
											"try {\r",
											"    if ( uri != dummyUri ) {\r",
											"        let response;\r",
											"        response = pm.response;\r",
											"\r",
											"        responseCode = parseInt(response.code)\r",
											"\r",
											"    }\r",
											"\r",
											"} catch (error) {\r",
											"    logger.error(\"! result could not be extracted.\")\r",
											"}\r",
											"\r",
											"\r",
											"/****************************************************************************************\r",
											"* Processing\r",
											"****************************************************************************************/\r",
											"try {\r",
											"    if ( uri != dummyUri ) {\r",
											"        logger.log(\"Analysis:\");\r",
											"\r",
											"        pm.test(\"ModifyWredProfile RPC responded 204\", function () {\r",
											"            pm.expect(responseCode).to.equal(204)\r",
											"        });\r",
											"        if ( responseCode == 204 ) {\r",
											"            logger.log(\"  - ok: ModifyWredProfile RPC responded 204\")\r",
											"        } else {\r",
											"            logger.log(\"  - FAIL: ModifyWredProfile RPC responded \" + responseCode + \" instead of 204\")\r",
											"        }\r",
											"\r",
											"    }\r",
											"\r",
											"} catch (error) {\r",
											"    logger.error(\"! validation could not be completely executed.\")\r",
											"}\r",
											"\r",
											"\r",
											"/****************************************************************************************\r",
											"* Setting Collection Variables\r",
											"****************************************************************************************/\r",
											"\r",
											"\r",
											"/****************************************************************************************\r",
											"* Functions\r",
											"****************************************************************************************/\r",
											"function ExtractServerInformation(serverList, searchedServerName) {\r",
											"    try {\r",
											"        for(let i=0; i<serverList.length; i++) {\r",
											"            if(serverList[i].serverName==searchedServerName) {\r",
											"                return serverList[i]\r",
											"            }\r",
											"        }\r",
											"    } catch (error) {\r",
											"        logger.error(\"! serverList not found or faulty\");\r",
											"        return {}\r",
											"    }\r",
											"    logger.warn(\"Server could not be found in serverList.\");\r",
											"    return {}\r",
											"}\r",
											"\r",
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"logger.struc(\"\\n===== ModifyWredProfile ===================================================================\");\r",
											"\r",
											"\r",
											"/****************************************************************************************\r",
											"* Loading Input Data\r",
											"****************************************************************************************/\r",
											"var collectionInfo = {};\r",
											"var serverInfo = {};\r",
											"var dummyServerInfo = {};\r",
											"var availableBufferSize = -1;\r",
											"var dropProbabilityAtThresholdLowIsAvail = false;\r",
											"var gentleWredIsAvail = false;\r",
											"var sensitivitySettingIsAvail = false;\r",
											"var coloringIsAvail = false;\r",
											"var createdWredProfileUuid = \"\";\r",
											"try {\r",
											"    let collectionInputList;\r",
											"    collectionInputList = pm.environment.get(\"collectionInputList\");\r",
											"    collectionInfo = ExtractCollectionInput(collectionInputList, \"WredProfileRpc\");\r",
											"\r",
											"    let serverToBeApplied;\r",
											"    serverToBeApplied = collectionInfo.serverToBeApplied;\r",
											"    let serverList;\r",
											"    serverList = pm.environment.get(\"serverList\");\r",
											"    serverInfo = ExtractServerInformation(serverList, serverToBeApplied);\r",
											"    dummyServerInfo = ExtractServerInformation(serverList, \"dummy\");\r",
											"\r",
											"    let wredProfileCapability;\r",
											"    wredProfileCapability = pm.collectionVariables.get(\"wredProfileCapability\");\r",
											"    availableBufferSize = wredProfileCapability[\"available-buffer-size\"];\r",
											"    dropProbabilityAtThresholdLowIsAvail = wredProfileCapability[\"drop-probability-at-threshold-low-is-avail\"];\r",
											"    gentleWredIsAvail = wredProfileCapability[\"gentle-wred-is-avail\"];\r",
											"    sensitivitySettingIsAvail = wredProfileCapability[\"sensitivity-setting-is-avail\"];\r",
											"    coloringIsAvail = wredProfileCapability[\"coloring-is-avail\"];\r",
											"\r",
											"    wredProfileConfigurationIsAvail = pm.collectionVariables.get(\"wredProfileConfigurationIsAvail\");\r",
											"\r",
											"    createdWredProfileUuid = pm.collectionVariables.get(\"createdWredProfileUuid\")\r",
											"\r",
											"} catch (error) {\r",
											"    logger.error(\"! Input data could not be loaded.\")\r",
											"}\r",
											"\r",
											"\r",
											"/****************************************************************************************\r",
											"* Processing\r",
											"****************************************************************************************/\r",
											"var modificationInput = {};\r",
											"try {\r",
											"    switch ( collectionInfo.kindOfReference ) {\r",
											"        case \"dynamic\":\r",
											"            let randomInteger;\r",
											"\r",
											"            randomInteger = Math.floor(Math.random() * 1000);\r",
											"            modificationInput.externalLabel = \"test_\" + randomInteger.toString();\r",
											"\r",
											"            let thresholdLow;\r",
											"            if ( availableBufferSize != -1 ) {\r",
											"                randomInteger = Math.floor(Math.random() * 20) + 20;\r",
											"                thresholdLow = Math.floor(availableBufferSize * randomInteger / 100);\r",
											"                modificationInput.thresholdLow = thresholdLow.toString()\r",
											"            };\r",
											"\r",
											"            if ( dropProbabilityAtThresholdLowIsAvail != false ) {\r",
											"                randomInteger = Math.floor(Math.random() * 10) + 10;\r",
											"                modificationInput.dropProbabilityAtThresholdLow = randomInteger.toString()\r",
											"            };\r",
											"\r",
											"            let thresholdHigh;\r",
											"            if ( availableBufferSize != -1 ) {\r",
											"                randomInteger = Math.floor(Math.random() * 20) + 70;\r",
											"                thresholdHigh = Math.floor(availableBufferSize * randomInteger / 100);\r",
											"                modificationInput.thresholdHigh = thresholdHigh.toString()\r",
											"            };\r",
											"\r",
											"            randomInteger = Math.floor(Math.random() * 10) + 80;\r",
											"            modificationInput.dropProbabilityAtThresholdHigh = randomInteger.toString();\r",
											"\r",
											"            if ( gentleWredIsAvail != false ) {\r",
											"                randomInteger = Math.floor(Math.random());\r",
											"                if (randomInteger<0.5) {\r",
											"                    modificationInput.gentleWredIsOn = false\r",
											"                } else {\r",
											"                    modificationInput.gentleWredIsOn = true\r",
											"                };\r",
											"            };\r",
											"\r",
											"            let thresholdGentle;\r",
											"            if ( (gentleWredIsAvail!=false) && (availableBufferSize!=-1) ) {\r",
											"                randomInteger = Math.floor(Math.random() * 10) + 90;\r",
											"                thresholdGentle = Math.floor(availableBufferSize * randomInteger / 100);\r",
											"                modificationInput.thresholdGentle = thresholdGentle.toString();\r",
											"            };\r",
											"\r",
											"            if ( sensitivitySettingIsAvail != false ) {\r",
											"                randomInteger = Math.floor(Math.random() * 16);\r",
											"                modificationInput.sensitivity = randomInteger.toString();\r",
											"            };\r",
											"\r",
											"            if ( coloringIsAvail != false ) {\r",
											"                randomInteger = Math.floor(Math.random());\r",
											"                if (randomInteger<0.5) {\r",
											"                    modificationInput.coloringIsOn = false\r",
											"                } else {\r",
											"                    modificationInput.coloringIsOn = true\r",
											"                };\r",
											"            };\r",
											"            break;\r",
											"\r",
											"        case \"static\":\r",
											"            modificationInput.externalLabel = \"label_from_modification\";\r",
											"            if ( availableBufferSize != -1 ) modificationInput.thresholdLow = \"400000\";\r",
											"            if ( dropProbabilityAtThresholdLowIsAvail != false ) modificationInput.dropProbabilityAtThresholdLow = \"20\";\r",
											"            if ( availableBufferSize != -1 ) modificationInput.thresholdHigh = \"900000\";\r",
											"            modificationInput.dropProbabilityAtThresholdHigh = \"90\";\r",
											"            if ( gentleWredIsAvail != false ) modificationInput.gentleWredIsOn = false\r",
											"            if ( (gentleWredIsAvail!=false) && (availableBufferSize!=-1) ) modificationInput.thresholdGentle = \"1000000\";\r",
											"            if ( sensitivitySettingIsAvail != false ) modificationInput.sensitivity = \"8\";\r",
											"            if ( coloringIsAvail != false ) modificationInput.coloringIsOn = false\r",
											"            break;\r",
											"\r",
											"        default:\r",
											"            logger.warn(\"Kind of reference (static/dynamic) unknown.\")\r",
											"\r",
											"    }\r",
											"\r",
											"} catch (error) {\r",
											"    logger.error(\"! Random body could not be created.\")\r",
											"}\r",
											"\r",
											"\r",
											"/****************************************************************************************\r",
											"* Setting Collection Variables\r",
											"****************************************************************************************/\r",
											"try {\r",
											"    pm.collectionVariables.set(\"modificationInput\", modificationInput);\r",
											"\r",
											"} catch (error) {\r",
											"    logger.error(\"! collection variables could not be set.\")\r",
											"}\r",
											"\r",
											"\r",
											"/****************************************************************************************\r",
											"* Setting Local Variables and Preparing the Request\r",
											"****************************************************************************************/\r",
											"try {\r",
											"    let remoteProcedure;\r",
											"    remoteProcedure = \"/wred-profile-1-0:modify-wred-profile\";\r",
											"    if(collectionInfo.suffixUrlEncodingIsRequired==true) remoteProcedure = UrlEncodeSuffix(remoteProcedure);\r",
											"\r",
											"    let pathToControlConstruct;\r",
											"    pathToControlConstruct = serverInfo.pathToControlConstruct;\r",
											"    let mountName;\r",
											"    mountName = collectionInfo.mountName;\r",
											"    pathToControlConstruct = FillMountNameIntoPath(pathToControlConstruct, mountName);\r",
											"\r",
											"    let server;\r",
											"    server = serverInfo.server;\r",
											"\r",
											"    let uri;\r",
											"    if ( (mountName!=\"\") && (createdWredProfileUuid!=undefined) && (createdWredProfileUuid!=\"\") ) {\r",
											"        if (wredProfileConfigurationIsAvail) {\r",
											"            uri = server + pathToControlConstruct + remoteProcedure\r",
											"        } else {\r",
											"            logger.warn(\"WredProfile configuration not supported.\");\r",
											"            uri = dummyServerInfo.dummyUri\r",
											"        }\r",
											"    } else {\r",
											"        logger.warn(\"Input data incomplete.\");\r",
											"        uri = dummyServerInfo.dummyUri\r",
											"    }\r",
											"\r",
											"    let requestBody;\r",
											"    requestBody = ''\r",
											"        +   '{ '\r",
											"        +       '\"input\": { '\r",
											"        +           '\"wred-profile-to-be-modified\": \"' + createdWredProfileUuid + '\", '\r",
											"        +           '\"external-label\": \"' + modificationInput.externalLabel + '\"';\r",
											"    if ( availableBufferSize != -1 ) {\r",
											"        requestBody += ', \"threshold-low\": \"' + modificationInput.thresholdLow + '\"';\r",
											"    };\r",
											"    if ( dropProbabilityAtThresholdLowIsAvail != false ) {\r",
											"        requestBody += ', \"drop-probability-at-threshold-low\": \"' + modificationInput.dropProbabilityAtThresholdLow + '\"';\r",
											"    };\r",
											"    if ( availableBufferSize != -1 ) {\r",
											"        requestBody += ', \"threshold-high\": \"' + modificationInput.thresholdHigh + '\"';\r",
											"    };\r",
											"    requestBody += ', \"drop-probability-at-threshold-high\": \"' + modificationInput.dropProbabilityAtThresholdHigh + '\"';\r",
											"    if ( gentleWredIsAvail != false ) {\r",
											"        requestBody += ', \"gentle-wred-is-on\": \"' + modificationInput.gentleWredIsOn + '\"';\r",
											"    };\r",
											"    if ( (gentleWredIsAvail!=false) && (availableBufferSize!=-1) ) {\r",
											"        requestBody += ', \"threshold-gentle\": \"' + modificationInput.thresholdGentle + '\"';\r",
											"    };\r",
											"    if ( sensitivitySettingIsAvail != false ) {\r",
											"        requestBody += ', \"sensitivity\": \"' + modificationInput.sensitivity + '\"';\r",
											"    };\r",
											"    if ( coloringIsAvail != false ) {\r",
											"        requestBody += ', \"coloring-is-on\": \"' + modificationInput.coloringIsOn + '\"';\r",
											"    };\r",
											"    requestBody = requestBody\r",
											"        +       ' }'\r",
											"        +   ' }';\r",
											"\r",
											"\r",
											"    pm.variables.clear();\r",
											"\r",
											"    pm.variables.set(\"uri\", uri);\r",
											"    pm.variables.set(\"requestBody\", requestBody);\r",
											"    \r",
											"    pm.request.headers.upsert({ key: \"Authorization\", value: serverInfo.authorizationCode });\r",
											"    pm.request.headers.upsert({ key: \"operation-key\", value: serverInfo.operationKey });\r",
											"    pm.request.headers.upsert({ key: \"user\", value: serverInfo.userName });\r",
											"    pm.request.headers.upsert({ key: \"originator\", value: serverInfo.originator });\r",
											"    pm.request.headers.upsert({ key: \"x-correlator\", value: serverInfo.xCorrelator });\r",
											"    pm.request.headers.upsert({ key: \"trace-indicator\", value: serverInfo.traceIndicator });\r",
											"    pm.request.headers.upsert({ key: \"customer-journey\", value: serverInfo.customerJourney });\r",
											"\r",
											"    pm.request.headers.upsert({ key: \"Accept\", value: \"application/json\" });\r",
											"    pm.request.headers.upsert({ key: \"Content-Type\", value: \"application/json\" })\r",
											"\r",
											"} catch (error) {\r",
											"    logger.error(\"! Local variables could not be set.\")\r",
											"}\r",
											"\r",
											"\r",
											"/****************************************************************************************\r",
											"* Functions\r",
											"****************************************************************************************/\r",
											"function ReplaceSubstringByNewstringInInputstring(inputstring, substring, newstring) {\r",
											"    try {\r",
											"        let indexOfStartOfSubstring = inputstring.lastIndexOf(substring);\r",
											"        while ( indexOfStartOfSubstring != -1 ) {\r",
											"            let precedingSubString = inputstring.slice(0, indexOfStartOfSubstring);\r",
											"            let indexOfEndOfSubstring = indexOfStartOfSubstring + substring.length;\r",
											"            let subsequentSubString = inputstring.slice(indexOfEndOfSubstring);\r",
											"            inputstring = precedingSubString + newstring + subsequentSubString;\r",
											"\r",
											"            indexOfStartOfSubstring = inputstring.lastIndexOf(substring)\r",
											"        }\r",
											"    } catch (error) {\r",
											"        inputstring = \"-1\";\r",
											"        logger.error(\"! Substring could not be replaced by Newstring\")\r",
											"    }\r",
											"    return inputstring\r",
											"}\r",
											"\r",
											"function UrlEncodeString(text) {\r",
											"    text = ReplaceSubstringByNewstringInInputstring(text, \"(\", \"%28\");\r",
											"    text = ReplaceSubstringByNewstringInInputstring(text, \")\", \"%29\");\r",
											"    text = ReplaceSubstringByNewstringInInputstring(text, \":\", \"%3A\");\r",
											"    text = ReplaceSubstringByNewstringInInputstring(text, \";\", \"%3B\");\r",
											"    return text\r",
											"}\r",
											"\r",
											"function UrlEncodeSuffix(remoteProcedure) {\r",
											"    var remoteProcedureWithUrlEncodedSuffix;\r",
											"    try {\r",
											"        let indexOfLastSlash = remoteProcedure.lastIndexOf(\"/\");\r",
											"        let suffix = remoteProcedure.slice(indexOfLastSlash);\r",
											"        let urlEncodedSuffix = UrlEncodeString(suffix);\r",
											"        if (urlEncodedSuffix==\"-1\") throw \"encoding failed\";\r",
											"        let trunkPath = remoteProcedure.slice(0, indexOfLastSlash);\r",
											"        remoteProcedureWithUrlEncodedSuffix = trunkPath + urlEncodedSuffix\r",
											"    } catch (error) {\r",
											"        remoteProcedureWithUrlEncodedSuffix = \"\";\r",
											"        logger.error(\"! Suffix of remote procedure could not be encoded\")\r",
											"    }\r",
											"    return remoteProcedureWithUrlEncodedSuffix\r",
											"}\r",
											"\r",
											"function FillUuidIntoPath(path, uuid) {\r",
											"    if ( (uuid!=undefined) && (uuid!=null) && (uuid!=\"\") ) {\r",
											"      let subStringToBeReplaced = \"{uuid}\";\r",
											"      let indexOfStartOfSubStringToBeReplaced = path.lastIndexOf(subStringToBeReplaced);\r",
											"      let precedingSubString = path.slice(0, indexOfStartOfSubStringToBeReplaced);\r",
											"      let indexOfEndOfSubStringToBeReplaced = indexOfStartOfSubStringToBeReplaced + subStringToBeReplaced.length;\r",
											"      let subsequentSubString = path.slice(indexOfEndOfSubStringToBeReplaced);\r",
											"      path = precedingSubString + uuid + subsequentSubString;\r",
											"      return path\r",
											"    } else {\r",
											"      return path\r",
											"    }\r",
											"}\r",
											"\r",
											"function FillLocalIdIntoPath(path, localId) {\r",
											"    if ( (localId!=undefined) && (localId!=null) && (localId!=\"\") ) {\r",
											"      let subStringToBeReplaced = \"{localId}\";\r",
											"      let indexOfStartOfSubStringToBeReplaced = path.lastIndexOf(subStringToBeReplaced);\r",
											"      let precedingSubString = path.slice(0, indexOfStartOfSubStringToBeReplaced);\r",
											"      let indexOfEndOfSubStringToBeReplaced = indexOfStartOfSubStringToBeReplaced + subStringToBeReplaced.length;\r",
											"      let subsequentSubString = path.slice(indexOfEndOfSubStringToBeReplaced);\r",
											"      path = precedingSubString + localId + subsequentSubString;\r",
											"      return path\r",
											"    } else {\r",
											"      return path\r",
											"    }\r",
											"}\r",
											"\r",
											"function FillMountNameIntoPath(path, mountName) {\r",
											"  let subStringToBeReplaced = \"{mountName}\";\r",
											"  let indexOfStartOfSubStringToBeReplaced = path.lastIndexOf(subStringToBeReplaced);\r",
											"  let precedingSubString = path.slice(0, indexOfStartOfSubStringToBeReplaced);\r",
											"  let indexOfEndOfSubStringToBeReplaced = indexOfStartOfSubStringToBeReplaced + subStringToBeReplaced.length;\r",
											"  let subsequentSubString = path.slice(indexOfEndOfSubStringToBeReplaced);\r",
											"  path = precedingSubString + mountName + subsequentSubString;\r",
											"  return path\r",
											"}\r",
											"\r",
											"function ExtractServerInformation(serverList, searchedServerName) {\r",
											"    try {\r",
											"        for(let i=0; i<serverList.length; i++) {\r",
											"            if(serverList[i].serverName==searchedServerName) {\r",
											"                return serverList[i]\r",
											"            }\r",
											"        }\r",
											"    } catch (error) {\r",
											"        logger.error(\"! serverList not found or faulty\");\r",
											"        return {}\r",
											"    }\r",
											"    logger.warn(\"Server could not be found in serverList.\");\r",
											"    return {}\r",
											"}\r",
											"\r",
											"function ExtractCollectionInput(collectionInputList, searchedCollection) {\r",
											"    try {\r",
											"        for(let i=0; i<collectionInputList.length; i++) {\r",
											"            if(collectionInputList[i].collectionName==searchedCollection) {\r",
											"                return collectionInputList[i]\r",
											"            }\r",
											"        }\r",
											"    } catch (error) {\r",
											"        logger.error(\"! collectionInputList not found or faulty\");\r",
											"        return {}\r",
											"    }\r",
											"    logger.warn(\"Collection could not be found in collectionInputList.\");\r",
											"    return {}\r",
											"}\r",
											"\r",
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"auth": {
									"type": "noauth"
								},
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{{requestBody}}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{uri}}",
									"host": [
										"{{uri}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "wred-profile-configuration",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"/****************************************************************************************\r",
											"* Loading Input Data\r",
											"****************************************************************************************/\r",
											"var uri;\r",
											"var dummyUri;\r",
											"var availableBufferSize = -1;\r",
											"var dropProbabilityAtThresholdLowIsAvail = false;\r",
											"var gentleWredIsAvail = false;\r",
											"var sensitivitySettingIsAvail = false;\r",
											"var coloringIsAvail = false;\r",
											"var sentExternalLabel = \"\";\r",
											"var sentThresholdLow = -1;\r",
											"var sentDropProbabilityAtThresholdLow = -1;\r",
											"var sentThresholdHigh = -1;\r",
											"var sentDropProbabilityAtThresholdHigh = -1;\r",
											"var sentGentleWredIsOn = false;\r",
											"var sentThresholdGentle = -1;\r",
											"var sentSensitivity = -1;\r",
											"var sentColoringIsOn = false;\r",
											"try {\r",
											"    uri = pm.variables.get(\"uri\");\r",
											"\r",
											"    let serverList;\r",
											"    serverList = pm.environment.get(\"serverList\");\r",
											"    let dummyServerInfo;\r",
											"    dummyServerInfo = ExtractServerInformation(serverList, \"dummy\");\r",
											"    dummyUri = dummyServerInfo.dummyUri;\r",
											"\r",
											"    let wredProfileCapability = {};\r",
											"    wredProfileCapability = pm.collectionVariables.get(\"wredProfileCapability\");\r",
											"    availableBufferSize = wredProfileCapability[\"available-buffer-size\"];\r",
											"    dropProbabilityAtThresholdLowIsAvail = wredProfileCapability[\"drop-probability-at-threshold-low-is-avail\"];\r",
											"    gentleWredIsAvail = wredProfileCapability[\"gentle-wred-is-avail\"];\r",
											"    sensitivitySettingIsAvail = wredProfileCapability[\"sensitivity-setting-is-avail\"];\r",
											"    coloringIsAvail = wredProfileCapability[\"coloring-is-avail\"];\r",
											"\r",
											"    let modificationInput;\r",
											"    modificationInput = pm.collectionVariables.get(\"modificationInput\");\r",
											"    sentExternalLabel = modificationInput.externalLabel;\r",
											"    sentThresholdLow = parseInt(modificationInput.thresholdLow);\r",
											"    sentDropProbabilityAtThresholdLow = parseInt(modificationInput.dropProbabilityAtThresholdLow);\r",
											"    sentThresholdHigh = parseInt(modificationInput.thresholdHigh);\r",
											"    sentDropProbabilityAtThresholdHigh = parseInt(modificationInput.dropProbabilityAtThresholdHigh);\r",
											"    sentGentleWredIsOn = modificationInput.gentleWredIsOn;\r",
											"    sentThresholdGentle = parseInt(modificationInput.thresholdGentle);\r",
											"    sentSensitivity = parseInt(modificationInput.sensitivity);\r",
											"    sentColoringIsOn = modificationInput.coloringIsOn;\r",
											"\r",
											"} catch (error) {\r",
											"    logger.error(\"! Input data could not be loaded.\")\r",
											"}\r",
											"\r",
											"\r",
											"/****************************************************************************************\r",
											"* Extracting Result\r",
											"****************************************************************************************/\r",
											"var responseCode;\r",
											"var responseObject = {};\r",
											"var storedExternalLabel = \"\";\r",
											"var storedThresholdLow = 0;\r",
											"var storedDropProbabilityAtThresholdLow = 0;\r",
											"var storedThresholdHigh = 0;\r",
											"var storedDropProbabilityAtThresholdHigh = 0;\r",
											"var storedGentleWredIsOn = true;\r",
											"var storedThresholdGentle = 0;\r",
											"var storedSensitivity = 0;\r",
											"var storedColoringIsOn = true;\r",
											"try {\r",
											"    if ( uri != dummyUri ) {\r",
											"        let response;\r",
											"        response = pm.response;\r",
											"\r",
											"        responseCode = parseInt(response.code);\r",
											"\r",
											"        if ( Math.floor(responseCode/100) === 2 ) {\r",
											"            responseObject = JSON.parse(response.stream);\r",
											"\r",
											"            let wredProfileConfiguration;\r",
											"            wredProfileConfiguration = responseObject[\"wred-profile-1-0:wred-profile-configuration\"];\r",
											"            storedExternalLabel = wredProfileConfiguration[\"external-label\"];\r",
											"            storedThresholdLow = wredProfileConfiguration[\"threshold-low\"];\r",
											"            storedDropProbabilityAtThresholdLow = wredProfileConfiguration[\"drop-probability-at-threshold-low\"];\r",
											"            storedThresholdHigh = wredProfileConfiguration[\"threshold-high\"];\r",
											"            storedDropProbabilityAtThresholdHigh = wredProfileConfiguration[\"drop-probability-at-threshold-high\"];\r",
											"            storedGentleWredIsOn = wredProfileConfiguration[\"gentle-wred-is-on\"];\r",
											"            storedThresholdGentle = wredProfileConfiguration[\"threshold-gentle\"];\r",
											"            storedSensitivity = wredProfileConfiguration[\"sensitivity\"];\r",
											"            storedColoringIsOn = wredProfileConfiguration[\"coloring-is-on\"];\r",
											"\r",
											"        }\r",
											"\r",
											"    }\r",
											"\r",
											"} catch (error) {\r",
											"    logger.error(\"! result could not be extracted.\")\r",
											"}\r",
											"\r",
											"\r",
											"/****************************************************************************************\r",
											"* Processing\r",
											"****************************************************************************************/\r",
											"try {\r",
											"    if ( uri != dummyUri ) {\r",
											"        logger.log(\"Analysis:\");\r",
											"\r",
											"        pm.test(\"WredProfileConfiguration could be loaded\", function () {\r",
											"            pm.expect(responseCode).to.equal(200)\r",
											"        });\r",
											"        if ( responseCode == 200 ) {\r",
											"            logger.log(\"  - ok: WredProfileConfiguration could be loaded\")\r",
											"        } else {\r",
											"            logger.log(\"  - FAIL: WredProfileConfiguration could not be loaded \" + responseCode + \" instead of 200\")\r",
											"        }\r",
											"\r",
											"        if ( Object.keys(responseObject).length != 0 ) {\r",
											"\r",
											"            let expectedExternalLabel;\r",
											"            expectedExternalLabel = sentExternalLabel;\r",
											"\r",
											"            let expectedThresholdLow;\r",
											"            if ( availableBufferSize == -1 ) {\r",
											"                expectedThresholdLow = -1\r",
											"            } else {\r",
											"                expectedThresholdLow = sentThresholdLow\r",
											"            };\r",
											"\r",
											"            let expectedDropProbabilityAtThresholdLow;\r",
											"            if ( dropProbabilityAtThresholdLowIsAvail == false ) {\r",
											"                expectedDropProbabilityAtThresholdLow = -1\r",
											"            } else {\r",
											"                expectedDropProbabilityAtThresholdLow = sentDropProbabilityAtThresholdLow\r",
											"            };\r",
											"\r",
											"            let expectedThresholdHigh;\r",
											"            if ( availableBufferSize == -1 ) {\r",
											"                expectedThresholdHigh = -1\r",
											"            } else {\r",
											"                expectedThresholdHigh = sentThresholdHigh\r",
											"            };\r",
											"\r",
											"            let expectedDropProbabilityAtThresholdHigh;\r",
											"            expectedDropProbabilityAtThresholdHigh = sentDropProbabilityAtThresholdHigh;\r",
											"\r",
											"            let expectedGentleWredIsOn;\r",
											"            if ( gentleWredIsAvail == false ) {\r",
											"                expectedGentleWredIsOn = false\r",
											"            } else {\r",
											"                expectedGentleWredIsOn = sentGentleWredIsOn\r",
											"            };\r",
											"\r",
											"            let expectedThresholdGentle;\r",
											"            if ( (gentleWredIsAvail==false) || (availableBufferSize==-1) ) {\r",
											"                expectedThresholdGentle = -1\r",
											"            } else {\r",
											"                expectedThresholdGentle = sentThresholdGentle\r",
											"            };\r",
											"\r",
											"            let expectedSensitivity;\r",
											"            if ( sensitivitySettingIsAvail == false ) {\r",
											"                expectedSensitivity = -1\r",
											"            } else {\r",
											"                expectedSensitivity = sentSensitivity\r",
											"            };\r",
											"\r",
											"            let expectedColoringIsOn;\r",
											"            if ( coloringIsAvail == false ) {\r",
											"                expectedColoringIsOn = false\r",
											"            } else {\r",
											"                expectedColoringIsOn = sentColoringIsOn\r",
											"            };\r",
											"\r",
											"            logger.log(\"  - externalLabel\");\r",
											"            logger.log(\"    - expected: \" + expectedExternalLabel);\r",
											"            logger.log(\"    - stored: \" + storedExternalLabel);\r",
											"\r",
											"            logger.log(\"  - thresholdLow (availableBufferSize=\" + availableBufferSize + \")\");\r",
											"            logger.log(\"    - expected: \" + expectedThresholdLow);\r",
											"            logger.log(\"    - stored: \" + storedThresholdLow);\r",
											"\r",
											"            logger.log(\"  - dropProbabilityAtThresholdLow (dropProbabilityAtThresholdLowIsAvail=\" + dropProbabilityAtThresholdLowIsAvail + \")\");\r",
											"            logger.log(\"    - expected: \" + expectedDropProbabilityAtThresholdLow);\r",
											"            logger.log(\"    - stored: \" + storedDropProbabilityAtThresholdLow);\r",
											"\r",
											"            logger.log(\"  - thresholdHigh (availableBufferSize=\" + availableBufferSize + \")\");\r",
											"            logger.log(\"    - expected: \" + expectedThresholdHigh);\r",
											"            logger.log(\"    - stored: \" + storedThresholdHigh);\r",
											"\r",
											"            logger.log(\"  - dropProbabilityAtThresholdHigh\");\r",
											"            logger.log(\"    - expected: \" + expectedDropProbabilityAtThresholdHigh);\r",
											"            logger.log(\"    - stored: \" + storedDropProbabilityAtThresholdHigh);\r",
											"\r",
											"            logger.log(\"  - gentleWredIsOn (gentleWredIsAvail=\" + gentleWredIsAvail + \")\");\r",
											"            logger.log(\"    - expected: \" + expectedGentleWredIsOn);\r",
											"            logger.log(\"    - stored: \" + storedGentleWredIsOn);\r",
											"\r",
											"            logger.log(\"  - thresholdGentle (gentleWredIsAvail=\" + gentleWredIsAvail + \")\");\r",
											"            logger.log(\"    - expected: \" + expectedThresholdGentle);\r",
											"            logger.log(\"    - stored: \" + storedThresholdGentle);\r",
											"\r",
											"            logger.log(\"  - sensitivity (sensitivitySettingIsAvail=\" + sensitivitySettingIsAvail + \")\");\r",
											"            logger.log(\"    - expected: \" + expectedSensitivity);\r",
											"            logger.log(\"    - stored: \" + storedSensitivity);\r",
											"\r",
											"            logger.log(\"  - coloringIsOn (coloringIsAvail=\" + coloringIsAvail + \")\");\r",
											"            logger.log(\"    - expected: \" + expectedColoringIsOn);\r",
											"            logger.log(\"    - stored: \" + storedColoringIsOn);\r",
											"\r",
											"            pm.test(\"Stored data matches input of ModifyWredProfile RPC\", function () {\r",
											"                pm.expect(storedExternalLabel).to.equal(expectedExternalLabel);\r",
											"                pm.expect(storedThresholdLow).to.equal(expectedThresholdLow);\r",
											"                pm.expect(storedDropProbabilityAtThresholdLow).to.equal(expectedDropProbabilityAtThresholdLow);\r",
											"                pm.expect(storedThresholdHigh).to.equal(expectedThresholdHigh);\r",
											"                pm.expect(storedDropProbabilityAtThresholdHigh).to.equal(expectedDropProbabilityAtThresholdHigh);\r",
											"                pm.expect(storedGentleWredIsOn).to.equal(expectedGentleWredIsOn);\r",
											"                pm.expect(storedThresholdGentle).to.equal(expectedThresholdGentle);\r",
											"                pm.expect(storedSensitivity).to.equal(expectedSensitivity);\r",
											"                pm.expect(storedColoringIsOn).to.equal(expectedColoringIsOn)\r",
											"            });\r",
											"            if ( (storedExternalLabel==expectedExternalLabel)\r",
											"                    && (storedThresholdLow==expectedThresholdLow)\r",
											"                    && (storedDropProbabilityAtThresholdLow==expectedDropProbabilityAtThresholdLow)\r",
											"                    && (storedThresholdHigh==expectedThresholdHigh)\r",
											"                    && (storedDropProbabilityAtThresholdHigh==expectedDropProbabilityAtThresholdHigh)\r",
											"                    && (storedGentleWredIsOn==expectedGentleWredIsOn)\r",
											"                    && (storedThresholdGentle==expectedThresholdGentle)\r",
											"                    && (storedSensitivity==expectedSensitivity)\r",
											"                    && (storedColoringIsOn==expectedColoringIsOn) ) {\r",
											"                logger.log(\"  - ok: Stored data matches input of ModifyWredProfile RPC\")\r",
											"            } else {\r",
											"                logger.log(\"  - FAIL: Stored data does not match input of ModifyWredProfile RPC\")\r",
											"            }\r",
											"\r",
											"        }\r",
											"\r",
											"    }\r",
											"\r",
											"} catch (error) {\r",
											"    logger.error(\"! validation could not be completely executed.\")\r",
											"}\r",
											"\r",
											"\r",
											"/****************************************************************************************\r",
											"* Setting Collection Variables\r",
											"****************************************************************************************/\r",
											"\r",
											"\r",
											"/****************************************************************************************\r",
											"* Functions\r",
											"****************************************************************************************/\r",
											"function ExtractServerInformation(serverList, searchedServerName) {\r",
											"    try {\r",
											"        for(let i=0; i<serverList.length; i++) {\r",
											"            if(serverList[i].serverName==searchedServerName) {\r",
											"                return serverList[i]\r",
											"            }\r",
											"        }\r",
											"    } catch (error) {\r",
											"        logger.error(\"! serverList not found or faulty\");\r",
											"        return {}\r",
											"    }\r",
											"    logger.warn(\"Server could not be found in serverList.\");\r",
											"    return {}\r",
											"}\r",
											"\r",
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"logger.struc(\"\\n===== WredProfileConfiguration ============================================================\");\r",
											"\r",
											"\r",
											"/****************************************************************************************\r",
											"* Loading Input Data\r",
											"****************************************************************************************/\r",
											"var collectionInfo = {};\r",
											"var serverInfo = {};\r",
											"var dummyServerInfo = {};\r",
											"var createdWredProfileUuid = \"\";\r",
											"try {\r",
											"    let collectionInputList;\r",
											"    collectionInputList = pm.environment.get(\"collectionInputList\");\r",
											"    collectionInfo = ExtractCollectionInput(collectionInputList, \"WredProfile\");\r",
											"\r",
											"    let serverToBeApplied;\r",
											"    serverToBeApplied = collectionInfo.serverToBeApplied;\r",
											"    let serverList;\r",
											"    serverList = pm.environment.get(\"serverList\");\r",
											"    serverInfo = ExtractServerInformation(serverList, serverToBeApplied);\r",
											"    dummyServerInfo = ExtractServerInformation(serverList, \"dummy\");\r",
											"\r",
											"    wredProfileConfigurationIsAvail = pm.collectionVariables.get(\"wredProfileConfigurationIsAvail\");\r",
											"\r",
											"    createdWredProfileUuid = pm.collectionVariables.get(\"createdWredProfileUuid\")\r",
											"\r",
											"} catch (error) {\r",
											"    logger.error(\"! Input data could not be loaded.\")\r",
											"}\r",
											"\r",
											"\r",
											"/****************************************************************************************\r",
											"* Processing\r",
											"****************************************************************************************/\r",
											"\r",
											"\r",
											"/****************************************************************************************\r",
											"* Setting Local Variables and Preparing the Request\r",
											"****************************************************************************************/\r",
											"try {\r",
											"    let filters;\r",
											"    filters = \"\";\r",
											"\r",
											"    let resourcePath;\r",
											"    let uuid = \"\";\r",
											"    resourcePath = \"/profile-collection/profile={uuid}/wred-profile-1-0:wred-profile-pac/wred-profile-configuration\";\r",
											"    if ( (createdWredProfileUuid!=\"\") && (createdWredProfileUuid!=undefined) ) {\r",
											"        switch ( collectionInfo.kindOfReference ) {\r",
											"            case \"dynamic\":\r",
											"                uuid = createdWredProfileUuid;\r",
											"                break;\r",
											"\r",
											"            case \"static\":\r",
											"                uuid = createdWredProfileUuid + \"b\";\r",
											"                break;\r",
											"\r",
											"            default:\r",
											"                logger.warn(\"Kind of reference (static/dynamic) unknown.\");\r",
											"                uuid = createdWredProfileUuid\r",
											"\r",
											"        }\r",
											"    }\r",
											"    resourcePath = FillUuidIntoPath(resourcePath, uuid);\r",
											"\r",
											"    let pathToControlConstruct;\r",
											"    pathToControlConstruct = serverInfo.pathToControlConstruct;\r",
											"    let mountName;\r",
											"    mountName = collectionInfo.mountName;\r",
											"    pathToControlConstruct = FillMountNameIntoPath(pathToControlConstruct, mountName);\r",
											"\r",
											"    let server;\r",
											"    server = serverInfo.server;\r",
											"\r",
											"    let uri;\r",
											"    if ( (mountName!=\"\") && (createdWredProfileUuid!=undefined) && (createdWredProfileUuid!=\"\") ) {\r",
											"        if (wredProfileConfigurationIsAvail) {\r",
											"            uri = server + pathToControlConstruct + resourcePath + filters\r",
											"        } else {\r",
											"            logger.warn(\"WredProfile configuration not supported.\");\r",
											"            uri = dummyServerInfo.dummyUri\r",
											"        }\r",
											"    } else {\r",
											"        logger.warn(\"Input data incomplete.\");\r",
											"        uri = dummyServerInfo.dummyUri\r",
											"    }\r",
											"\r",
											"    let requestBody;\r",
											"    requestBody = '{}';\r",
											"\r",
											"\r",
											"    pm.variables.clear();\r",
											"\r",
											"    pm.variables.set(\"uri\", uri);\r",
											"    pm.variables.set(\"requestBody\", requestBody);\r",
											"    \r",
											"    pm.request.headers.upsert({ key: \"Authorization\", value: serverInfo.authorizationCode });\r",
											"    pm.request.headers.upsert({ key: \"operation-key\", value: serverInfo.operationKey });\r",
											"    pm.request.headers.upsert({ key: \"user\", value: serverInfo.userName });\r",
											"    pm.request.headers.upsert({ key: \"originator\", value: serverInfo.originator });\r",
											"    pm.request.headers.upsert({ key: \"x-correlator\", value: serverInfo.xCorrelator });\r",
											"    pm.request.headers.upsert({ key: \"trace-indicator\", value: serverInfo.traceIndicator });\r",
											"    pm.request.headers.upsert({ key: \"customer-journey\", value: serverInfo.customerJourney });\r",
											"\r",
											"    pm.request.headers.upsert({ key: \"Accept\", value: \"application/json\" });\r",
											"    pm.request.headers.upsert({ key: \"Content-Type\", value: \"application/json\" })\r",
											"\r",
											"} catch (error) {\r",
											"    logger.error(\"! Local variables could not be set.\")\r",
											"}\r",
											"\r",
											"\r",
											"/****************************************************************************************\r",
											"* Functions\r",
											"****************************************************************************************/\r",
											"function FillUuidIntoPath(path, uuid) {\r",
											"    if ( (uuid!=undefined) && (uuid!=null) && (uuid!=\"\") ) {\r",
											"      let subStringToBeReplaced = \"{uuid}\";\r",
											"      let indexOfStartOfSubStringToBeReplaced = path.lastIndexOf(subStringToBeReplaced);\r",
											"      let precedingSubString = path.slice(0, indexOfStartOfSubStringToBeReplaced);\r",
											"      let indexOfEndOfSubStringToBeReplaced = indexOfStartOfSubStringToBeReplaced + subStringToBeReplaced.length;\r",
											"      let subsequentSubString = path.slice(indexOfEndOfSubStringToBeReplaced);\r",
											"      path = precedingSubString + uuid + subsequentSubString;\r",
											"      return path\r",
											"    } else {\r",
											"      return path\r",
											"    }\r",
											"}\r",
											"\r",
											"function FillLocalIdIntoPath(path, localId) {\r",
											"    if ( (localId!=undefined) && (localId!=null) && (localId!=\"\") ) {\r",
											"      let subStringToBeReplaced = \"{localId}\";\r",
											"      let indexOfStartOfSubStringToBeReplaced = path.lastIndexOf(subStringToBeReplaced);\r",
											"      let precedingSubString = path.slice(0, indexOfStartOfSubStringToBeReplaced);\r",
											"      let indexOfEndOfSubStringToBeReplaced = indexOfStartOfSubStringToBeReplaced + subStringToBeReplaced.length;\r",
											"      let subsequentSubString = path.slice(indexOfEndOfSubStringToBeReplaced);\r",
											"      path = precedingSubString + localId + subsequentSubString;\r",
											"      return path\r",
											"    } else {\r",
											"      return path\r",
											"    }\r",
											"}\r",
											"\r",
											"function FillMountNameIntoPath(path, mountName) {\r",
											"  let subStringToBeReplaced = \"{mountName}\";\r",
											"  let indexOfStartOfSubStringToBeReplaced = path.lastIndexOf(subStringToBeReplaced);\r",
											"  let precedingSubString = path.slice(0, indexOfStartOfSubStringToBeReplaced);\r",
											"  let indexOfEndOfSubStringToBeReplaced = indexOfStartOfSubStringToBeReplaced + subStringToBeReplaced.length;\r",
											"  let subsequentSubString = path.slice(indexOfEndOfSubStringToBeReplaced);\r",
											"  path = precedingSubString + mountName + subsequentSubString;\r",
											"  return path\r",
											"}\r",
											"\r",
											"function ExtractServerInformation(serverList, searchedServerName) {\r",
											"    try {\r",
											"        for(let i=0; i<serverList.length; i++) {\r",
											"            if(serverList[i].serverName==searchedServerName) {\r",
											"                return serverList[i]\r",
											"            }\r",
											"        }\r",
											"    } catch (error) {\r",
											"        logger.error(\"! serverList not found or faulty\");\r",
											"        return {}\r",
											"    }\r",
											"    logger.warn(\"Server could not be found in serverList.\");\r",
											"    return {}\r",
											"}\r",
											"\r",
											"function ExtractCollectionInput(collectionInputList, searchedCollection) {\r",
											"    try {\r",
											"        for(let i=0; i<collectionInputList.length; i++) {\r",
											"            if(collectionInputList[i].collectionName==searchedCollection) {\r",
											"                return collectionInputList[i]\r",
											"            }\r",
											"        }\r",
											"    } catch (error) {\r",
											"        logger.error(\"! collectionInputList not found or faulty\");\r",
											"        return {}\r",
											"    }\r",
											"    logger.warn(\"Collection could not be found in collectionInputList.\");\r",
											"    return {}\r",
											"}\r",
											"\r",
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"auth": {
									"type": "noauth"
								},
								"method": "GET",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{{requestBody}}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{uri}}",
									"host": [
										"{{uri}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "delete-wred-profile",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"/****************************************************************************************\r",
											"* Loading Input Data\r",
											"****************************************************************************************/\r",
											"var uri;\r",
											"var dummyUri;\r",
											"try {\r",
											"    uri = pm.variables.get(\"uri\");\r",
											"\r",
											"    let serverList;\r",
											"    serverList = pm.environment.get(\"serverList\");\r",
											"    let dummyServerInfo;\r",
											"    dummyServerInfo = ExtractServerInformation(serverList, \"dummy\");\r",
											"    dummyUri = dummyServerInfo.dummyUri\r",
											"\r",
											"} catch (error) {\r",
											"    logger.error(\"! Input data could not be loaded.\")\r",
											"}\r",
											"\r",
											"\r",
											"/****************************************************************************************\r",
											"* Extracting Result\r",
											"****************************************************************************************/\r",
											"var responseCode;\r",
											"try {\r",
											"    if ( uri != dummyUri ) {\r",
											"        let response;\r",
											"        response = pm.response;\r",
											"\r",
											"        responseCode = parseInt(response.code)\r",
											"\r",
											"    }\r",
											"\r",
											"} catch (error) {\r",
											"    logger.error(\"! result could not be extracted.\")\r",
											"}\r",
											"\r",
											"\r",
											"/****************************************************************************************\r",
											"* Processing\r",
											"****************************************************************************************/\r",
											"try {\r",
											"    if ( uri != dummyUri ) {\r",
											"        logger.log(\"Analysis:\");\r",
											"\r",
											"        pm.test(\"DeleteWredProfile RPC responded 204\", function () {\r",
											"            pm.expect(responseCode).to.equal(204)\r",
											"        });\r",
											"        if ( responseCode == 204 ) {\r",
											"            logger.log(\"  - ok: DeleteWredProfile RPC responded 204\")\r",
											"        } else {\r",
											"            logger.log(\"  - FAIL: DeleteWredProfile RPC responded \" + responseCode + \" instead of 204\")\r",
											"        }\r",
											"\r",
											"    }\r",
											"\r",
											"} catch (error) {\r",
											"    logger.error(\"! validation could not be completely executed.\")\r",
											"}\r",
											"\r",
											"\r",
											"/****************************************************************************************\r",
											"* Setting Collection Variables\r",
											"****************************************************************************************/\r",
											"\r",
											"\r",
											"/****************************************************************************************\r",
											"* Functions\r",
											"****************************************************************************************/\r",
											"function ExtractServerInformation(serverList, searchedServerName) {\r",
											"    try {\r",
											"        for(let i=0; i<serverList.length; i++) {\r",
											"            if(serverList[i].serverName==searchedServerName) {\r",
											"                return serverList[i]\r",
											"            }\r",
											"        }\r",
											"    } catch (error) {\r",
											"        logger.error(\"! serverList not found or faulty\");\r",
											"        return {}\r",
											"    }\r",
											"    logger.warn(\"Server could not be found in serverList.\");\r",
											"    return {}\r",
											"}\r",
											"\r",
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"logger.struc(\"\\n===== DeleteWredProfile ===================================================================\");\r",
											"\r",
											"\r",
											"/****************************************************************************************\r",
											"* Loading Input Data\r",
											"****************************************************************************************/\r",
											"var collectionInfo = {};\r",
											"var serverInfo = {};\r",
											"var dummyServerInfo = {};\r",
											"var createdWredProfileUuid = \"\";\r",
											"try {\r",
											"    let collectionInputList;\r",
											"    collectionInputList = pm.environment.get(\"collectionInputList\");\r",
											"    collectionInfo = ExtractCollectionInput(collectionInputList, \"WredProfileRpc\");\r",
											"\r",
											"    let serverToBeApplied;\r",
											"    serverToBeApplied = collectionInfo.serverToBeApplied;\r",
											"    let serverList;\r",
											"    serverList = pm.environment.get(\"serverList\");\r",
											"    serverInfo = ExtractServerInformation(serverList, serverToBeApplied);\r",
											"    dummyServerInfo = ExtractServerInformation(serverList, \"dummy\");\r",
											"\r",
											"    createdWredProfileUuid = pm.collectionVariables.get(\"createdWredProfileUuid\")\r",
											"\r",
											"} catch (error) {\r",
											"    logger.error(\"! Input data could not be loaded.\")\r",
											"}\r",
											"\r",
											"\r",
											"/****************************************************************************************\r",
											"* Processing\r",
											"****************************************************************************************/\r",
											"\r",
											"\r",
											"/****************************************************************************************\r",
											"* Setting Local Variables and Preparing the Request\r",
											"****************************************************************************************/\r",
											"try {\r",
											"    let remoteProcedure;\r",
											"    remoteProcedure = \"/wred-profile-1-0:delete-wred-profile\";\r",
											"    if(collectionInfo.suffixUrlEncodingIsRequired==true) remoteProcedure = UrlEncodeSuffix(remoteProcedure);\r",
											"\r",
											"    let pathToControlConstruct;\r",
											"    pathToControlConstruct = serverInfo.pathToControlConstruct;\r",
											"    let mountName;\r",
											"    mountName = collectionInfo.mountName;\r",
											"    pathToControlConstruct = FillMountNameIntoPath(pathToControlConstruct, mountName);\r",
											"\r",
											"    let server;\r",
											"    server = serverInfo.server;\r",
											"\r",
											"    let uri;\r",
											"    if ( (mountName!=\"\") && (createdWredProfileUuid!=\"\") && (createdWredProfileUuid!=undefined) ) {\r",
											"        uri = server + pathToControlConstruct + remoteProcedure\r",
											"    } else {\r",
											"        logger.warn(\"Input data incomplete.\");\r",
											"        uri = dummyServerInfo.dummyUri\r",
											"    }\r",
											"\r",
											"    let requestBody;\r",
											"    requestBody = ''\r",
											"        +   '{ '\r",
											"        +       '\"input\": { '\r",
											"        +           '\"obsolete-wred-profile\": \"' + createdWredProfileUuid + '\" '\r",
											"        +       '} '\r",
											"        +   '}';\r",
											"\r",
											"\r",
											"    pm.variables.clear();\r",
											"\r",
											"    pm.variables.set(\"uri\", uri);\r",
											"    pm.variables.set(\"requestBody\", requestBody);\r",
											"    \r",
											"    pm.request.headers.upsert({ key: \"Authorization\", value: serverInfo.authorizationCode });\r",
											"    pm.request.headers.upsert({ key: \"operation-key\", value: serverInfo.operationKey });\r",
											"    pm.request.headers.upsert({ key: \"user\", value: serverInfo.userName });\r",
											"    pm.request.headers.upsert({ key: \"originator\", value: serverInfo.originator });\r",
											"    pm.request.headers.upsert({ key: \"x-correlator\", value: serverInfo.xCorrelator });\r",
											"    pm.request.headers.upsert({ key: \"trace-indicator\", value: serverInfo.traceIndicator });\r",
											"    pm.request.headers.upsert({ key: \"customer-journey\", value: serverInfo.customerJourney });\r",
											"\r",
											"    pm.request.headers.upsert({ key: \"Accept\", value: \"application/json\" });\r",
											"    pm.request.headers.upsert({ key: \"Content-Type\", value: \"application/json\" })\r",
											"\r",
											"} catch (error) {\r",
											"    logger.error(\"! Local variables could not be set.\")\r",
											"}\r",
											"\r",
											"\r",
											"/****************************************************************************************\r",
											"* Functions\r",
											"****************************************************************************************/\r",
											"function ReplaceSubstringByNewstringInInputstring(inputstring, substring, newstring) {\r",
											"    try {\r",
											"        let indexOfStartOfSubstring = inputstring.lastIndexOf(substring);\r",
											"        while ( indexOfStartOfSubstring != -1 ) {\r",
											"            let precedingSubString = inputstring.slice(0, indexOfStartOfSubstring);\r",
											"            let indexOfEndOfSubstring = indexOfStartOfSubstring + substring.length;\r",
											"            let subsequentSubString = inputstring.slice(indexOfEndOfSubstring);\r",
											"            inputstring = precedingSubString + newstring + subsequentSubString;\r",
											"\r",
											"            indexOfStartOfSubstring = inputstring.lastIndexOf(substring)\r",
											"        }\r",
											"    } catch (error) {\r",
											"        inputstring = \"-1\";\r",
											"        logger.error(\"! Substring could not be replaced by Newstring\")\r",
											"    }\r",
											"    return inputstring\r",
											"}\r",
											"\r",
											"function UrlEncodeString(text) {\r",
											"    text = ReplaceSubstringByNewstringInInputstring(text, \"(\", \"%28\");\r",
											"    text = ReplaceSubstringByNewstringInInputstring(text, \")\", \"%29\");\r",
											"    text = ReplaceSubstringByNewstringInInputstring(text, \":\", \"%3A\");\r",
											"    text = ReplaceSubstringByNewstringInInputstring(text, \";\", \"%3B\");\r",
											"    return text\r",
											"}\r",
											"\r",
											"function UrlEncodeSuffix(remoteProcedure) {\r",
											"    var remoteProcedureWithUrlEncodedSuffix;\r",
											"    try {\r",
											"        let indexOfLastSlash = remoteProcedure.lastIndexOf(\"/\");\r",
											"        let suffix = remoteProcedure.slice(indexOfLastSlash);\r",
											"        let urlEncodedSuffix = UrlEncodeString(suffix);\r",
											"        if (urlEncodedSuffix==\"-1\") throw \"encoding failed\";\r",
											"        let trunkPath = remoteProcedure.slice(0, indexOfLastSlash);\r",
											"        remoteProcedureWithUrlEncodedSuffix = trunkPath + urlEncodedSuffix\r",
											"    } catch (error) {\r",
											"        remoteProcedureWithUrlEncodedSuffix = \"\";\r",
											"        logger.error(\"! Suffix of remote procedure could not be encoded\")\r",
											"    }\r",
											"    return remoteProcedureWithUrlEncodedSuffix\r",
											"}\r",
											"\r",
											"function FillUuidIntoPath(path, uuid) {\r",
											"    if ( (uuid!=undefined) && (uuid!=null) && (uuid!=\"\") ) {\r",
											"      let subStringToBeReplaced = \"{uuid}\";\r",
											"      let indexOfStartOfSubStringToBeReplaced = path.lastIndexOf(subStringToBeReplaced);\r",
											"      let precedingSubString = path.slice(0, indexOfStartOfSubStringToBeReplaced);\r",
											"      let indexOfEndOfSubStringToBeReplaced = indexOfStartOfSubStringToBeReplaced + subStringToBeReplaced.length;\r",
											"      let subsequentSubString = path.slice(indexOfEndOfSubStringToBeReplaced);\r",
											"      path = precedingSubString + uuid + subsequentSubString;\r",
											"      return path\r",
											"    } else {\r",
											"      return path\r",
											"    }\r",
											"}\r",
											"\r",
											"function FillLocalIdIntoPath(path, localId) {\r",
											"    if ( (localId!=undefined) && (localId!=null) && (localId!=\"\") ) {\r",
											"      let subStringToBeReplaced = \"{localId}\";\r",
											"      let indexOfStartOfSubStringToBeReplaced = path.lastIndexOf(subStringToBeReplaced);\r",
											"      let precedingSubString = path.slice(0, indexOfStartOfSubStringToBeReplaced);\r",
											"      let indexOfEndOfSubStringToBeReplaced = indexOfStartOfSubStringToBeReplaced + subStringToBeReplaced.length;\r",
											"      let subsequentSubString = path.slice(indexOfEndOfSubStringToBeReplaced);\r",
											"      path = precedingSubString + localId + subsequentSubString;\r",
											"      return path\r",
											"    } else {\r",
											"      return path\r",
											"    }\r",
											"}\r",
											"\r",
											"function FillMountNameIntoPath(path, mountName) {\r",
											"  let subStringToBeReplaced = \"{mountName}\";\r",
											"  let indexOfStartOfSubStringToBeReplaced = path.lastIndexOf(subStringToBeReplaced);\r",
											"  let precedingSubString = path.slice(0, indexOfStartOfSubStringToBeReplaced);\r",
											"  let indexOfEndOfSubStringToBeReplaced = indexOfStartOfSubStringToBeReplaced + subStringToBeReplaced.length;\r",
											"  let subsequentSubString = path.slice(indexOfEndOfSubStringToBeReplaced);\r",
											"  path = precedingSubString + mountName + subsequentSubString;\r",
											"  return path\r",
											"}\r",
											"\r",
											"function ExtractServerInformation(serverList, searchedServerName) {\r",
											"    try {\r",
											"        for(let i=0; i<serverList.length; i++) {\r",
											"            if(serverList[i].serverName==searchedServerName) {\r",
											"                return serverList[i]\r",
											"            }\r",
											"        }\r",
											"    } catch (error) {\r",
											"        logger.error(\"! serverList not found or faulty\");\r",
											"        return {}\r",
											"    }\r",
											"    logger.warn(\"Server could not be found in serverList.\");\r",
											"    return {}\r",
											"}\r",
											"\r",
											"function ExtractCollectionInput(collectionInputList, searchedCollection) {\r",
											"    try {\r",
											"        for(let i=0; i<collectionInputList.length; i++) {\r",
											"            if(collectionInputList[i].collectionName==searchedCollection) {\r",
											"                return collectionInputList[i]\r",
											"            }\r",
											"        }\r",
											"    } catch (error) {\r",
											"        logger.error(\"! collectionInputList not found or faulty\");\r",
											"        return {}\r",
											"    }\r",
											"    logger.warn(\"Collection could not be found in collectionInputList.\");\r",
											"    return {}\r",
											"}\r",
											"\r",
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"auth": {
									"type": "noauth"
								},
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{{requestBody}}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{uri}}",
									"host": [
										"{{uri}}"
									]
								}
							},
							"response": []
						}
					]
				}
			]
		},
		{
			"name": "Termination",
			"item": [
				{
					"name": "Clearing collection data",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"logger.struc(\"\\n===== Clearing collection data ============================================================\");\r",
									"\r",
									"/****************************************************************************************\r",
									"* Loading Input Data\r",
									"****************************************************************************************/\r",
									"var dummyServerInfo;\r",
									"try {\r",
									"    let serverList;\r",
									"    serverList = pm.environment.get(\"serverList\");\r",
									"    dummyServerInfo = ExtractServerInformation(serverList, \"dummy\")\r",
									"\r",
									"} catch (error) {\r",
									"    logger.error(\"! Input data could not be loaded.\")\r",
									"}\r",
									"\r",
									"\r",
									"/****************************************************************************************\r",
									"* Processing\r",
									"****************************************************************************************/\r",
									"\r",
									"\r",
									"/****************************************************************************************\r",
									"* Setting Local Variables and Preparing the Request\r",
									"****************************************************************************************/\r",
									"try {\r",
									"    let uri;\r",
									"    uri = dummyServerInfo.dummyUri;\r",
									"\r",
									"    pm.variables.clear();\r",
									"\r",
									"    pm.variables.set(\"uri\", uri);\r",
									"\r",
									"    pm.request.headers.upsert({ key: \"Accept\", value: \"application/json\" });\r",
									"    pm.request.headers.upsert({ key: \"Content-Type\", value: \"application/json\" })\r",
									"\r",
									"} catch (error) {\r",
									"    logger.error(\"! Local variables could not be set.\")\r",
									"}\r",
									"\r",
									"\r",
									"/****************************************************************************************\r",
									"* Functions\r",
									"****************************************************************************************/\r",
									"function ExtractServerInformation(serverList, searchedServerName) {\r",
									"    try {\r",
									"        for(let i=0; i<serverList.length; i++) {\r",
									"            if(serverList[i].serverName==searchedServerName) {\r",
									"                return serverList[i]\r",
									"            }\r",
									"        }\r",
									"    } catch (error) {\r",
									"        logger.error(\"! serverList not found or faulty\");\r",
									"        return {}\r",
									"    }\r",
									"    logger.warn(\"Server could not be found in serverList.\");\r",
									"    return {}\r",
									"}\r",
									"\r",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"/****************************************************************************************\r",
									"* Loading Input Data\r",
									"****************************************************************************************/\r",
									"\r",
									"\r",
									"/****************************************************************************************\r",
									"* Extracting Result\r",
									"****************************************************************************************/\r",
									"\r",
									"\r",
									"/****************************************************************************************\r",
									"* Setting Environment Variables\r",
									"****************************************************************************************/\r",
									"try {\r",
									"    pm.environment.clear();\r",
									"    pm.collectionVariables.clear();\r",
									"    pm.variables.clear()\r",
									"\r",
									"} catch (error) {\r",
									"    logger.error(\"! Environment variables could not be set.\")\r",
									"}\r",
									"\r",
									"\r",
									"/****************************************************************************************\r",
									"* Functions\r",
									"****************************************************************************************/\r",
									"\r",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"auth": {
							"type": "noauth"
						},
						"method": "GET",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{{requestBody}}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{uri}}",
							"host": [
								"{{uri}}"
							]
						}
					},
					"response": []
				}
			]
		}
	],
	"event": [
		{
			"listen": "prerequest",
			"script": {
				"type": "text/javascript",
				"exec": [
					"// Log levels ordered based on most to less verbose:",
					"// This script expects \"logLevel\" environment variable to be one of these log levels:",
					"// debug -> log -> info -> warn -> error -> struc -> none",
					"// It creates \"logger\" global variable which can be used anywhere in nested collection scripts",
					"",
					"const logLevels = [\"debug\", \"log\", \"info\", \"warn\", \"error\", \"struc\", \"none\"];",
					"",
					"const shouldLog = (level) => {",
					"  return logLevels.indexOf(level) >= logLevels.indexOf(pm.environment.get(\"logLevel\"));",
					"};",
					"",
					"logger = {",
					"  debug: (message, ...optionalParams) => {",
					"    shouldLog(\"debug\") && console.log(message, ...optionalParams);",
					"  },",
					"  log: (message, ...optionalParams) => {",
					"    shouldLog(\"log\") && console.log(message, ...optionalParams);",
					"  },",
					"  info: (message, ...optionalParams) => {",
					"    shouldLog(\"info\") && console.log(message, ...optionalParams);",
					"  },",
					"  warn: (message, ...optionalParams) => {",
					"    shouldLog(\"warn\") && console.log(message, ...optionalParams);",
					"  },",
					"  error: (message, ...optionalParams) => {",
					"    shouldLog(\"error\") && console.error(message, ...optionalParams);",
					"  },",
					"  struc: (message, ...optionalParams) => {",
					"    shouldLog(\"error\") && console.log(message, ...optionalParams);",
					"  },",
					"};",
					""
				]
			}
		},
		{
			"listen": "test",
			"script": {
				"type": "text/javascript",
				"exec": [
					""
				]
			}
		}
	]
}